
@{
    ViewData["Title"] = "ImageMaskTag";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create Mask Points for an Image</h2>



<div id="devOperations">
    <table class="table table-condensed" align="center">
        <tbody>
            <tr valign="middle">
                <th align="center" width="30%"></th>
                <th align="center" width="40%"></th>
                <th align="center" width="30%"></th>
            </tr>


            <tr align="center" valign="middle">
                <td align="right"><label class="col-md-12 control-label">Account :</label></td>
                <td align="left" colspan="2"><input id="txtAccount" name="txtAccount" value="nkdsvm" /></td>

            </tr>

            <tr align="center" valign="middle">
                <td align="right"><label class="col-md-12 control-label">SAS: </label></td>
                <td align="left" colspan="2"><input class="btn-block" id="txtSAS" name="txtSAS" value='' /></td>

            </tr>

            <tr align="center" valign="middle">
                <td align="right"><label class="col-md-12 control-label">Source Share</label></td>
                <td align="left" colspan="2"><input id="txtSourceShare" name="txtSourceShare" value="experiment-data" /></td>

            </tr>

            <tr align="center" valign="middle">
                <td align="right"><label class="col-md-12 control-label">Source Directory</label></td>
                <td align="left" colspan="2"><input class="btn-block" id="txtSourceDirectory" name="txtSourceDirectory" value="object-detection/2018-04-15" /></td>
            </tr>

            <tr align="center" valign="middle">
                <td align="right"><label class="col-md-12 control-label">Image File Name</label></td>
                <td align="left"><input id="txtImageFileName" name="txtImageFileName" value="2018-04-15_0855.jpg" /></td>
                <td align="left"><label id="lblImageDimensions"> Image Dimensions </label></td>
            </tr>

            <tr>
                <td align="center"><button id="btnLoadImage" class="btn btn-info" onclick="btnLoadImageHandler()">Load Image</button></td>
                <td align="center"><button id="btnSaveMaskTags" class="btn btn-success" onclick="btnSaveMaskTagsHandler()">Save Mask Tags</button></td>
                <td align="center"><button id="btnLoadMaskImage" class="btn btn-primary" onclick="btnLoadMaskImageHandler()">Load Masked Image</button></td>
            </tr>

            <tr align="center" valign="middle">
                <td align="right"><label class="col-md-12 control-label">Mask Points : </label></td>
                <td align="center" colspan="2"><input class="btn-block" id="txtMaskPoints" /></td>
            </tr>

            <tr align="center" valign="middle">
                <td align="right"><label class="col-md-12 control-label">Operation Result  : </label></td>
                <td align="left" colspan="2"><label class="btn-block" id="lblResult" ></label></td>
            </tr>
        </tbody>
    </table>
</div>

<hr />

<h6>Images :</h6>
<div id="divImg">
    <img id="dynamicImage"
         src="" alt="ALT">
</div>
<div id=divCanvas>
    <canvas id="topCanvas"></canvas>
</div>
<div>
    <canvas id="imageCanvas"></canvas>
    <canvas id="sideCanvas"></canvas>
</div>
<div>
    <img id="maskImage"
         src="" alt="ALT">
</div>



@section Scripts {

    <script>
        var sourceShare = '';
        var sourceDirectory = '';
        var imageFileName = '';
        var account = '';
        var sas = '';

        $(function () // called when the body is ready
        {
            console.log("Home Run");
            getAllValues();
        });

        function getAllValues() {
            account = document.getElementById('txtAccount').value;
            sas = document.getElementById('txtSAS').value;
            sourceShare = document.getElementById('txtSourceShare').value;
            sourceDirectory = document.getElementById('txtSourceDirectory').value;
            imageFileName = document.getElementById('txtImageFileName').value;
        }

        function checkParameters() {
            getAllValues();

            if (account == null || account.length < 1) {
                alert('Please enter a valid Account name!');
                return false;
            }

            // check additional parameters
            if (sas == null || sas.length < 1) {
                alert('Please enter a valid SAS key!');
                return false;
            }

            if (sourceShare == null || sourceShare.length < 1) {
                alert('Please enter a valid storage sourceShare name!');
                return false;
            }

            // check additional parameters
            if (sourceDirectory == null || sourceDirectory.length < 1) {
                alert('Please enter a valid Source Directory name!');
                return false;
            }

            if (imageFileName == null || imageFileName.length < 1) {
                alert('Please enter a valid image File name!');
                return false;
            }
            return true;
        }

        function btnLoadImageHandler() {
            console.log("btnLoadImageHandler");
            var checkOK = checkParameters();
            if (!checkOK)
                return;
            loadDynamicImage(); 
        }

        function btnLoadAllExperimentsAndFirtsFiles() {
            console.log("btnLoadImageHandler");
            var checkOK = checkParameters();
            if (!checkOK)
                return;


            var jsonData = {
                _sourceFileShareFolderName: sourceShare, _sourceDirectoryName: sourceDirectory
            };
            console.log(jsonData);
            var updatedTagJson = JSON.stringify(jsonData);
            console.log(updatedTagJson);
            InvokeWebAPIGetAllExperiments(updatedTagJson)
        }

        var imageHeight;
        var imageWidth; 
        var rowDim = 50; 
        var maxHeight = 650;
        var maxWidth = 800; 
        var dynamicImage = document.getElementById("dynamicImage");
        var imageCanvas = document.getElementById("imageCanvas");
        var topCanvas = document.getElementById("topCanvas");
        var sideCanvas = document.getElementById("sideCanvas");
        var selectedMaskPoints = []; 

        function loadDynamicImage() {
            $("body").css("cursor", "progress");

            selectedMaskPoints = [];
            $('#txtMaskPoints').val(''); 
            UpdateTextDivObject('');
            
            var fileUri = 'https://' + account + '.file.core.windows.net/';
            var imgAttrubute = fileUri + sourceShare + "/" + sourceDirectory + "/" + imageFileName + sas;

            dynamicImage.onload = imgOnLoad; // call back once the image is loaded
            setTimeout(function () {
                dynamicImage.style.display = ''; 
                dynamicImage.setAttribute("alt", 'Unable to obtain image');
                dynamicImage.setAttribute("src", imgAttrubute);
            }, 1000); 
            console.log("Unable to load image!!!");
        }

        function imgOnLoad() {
            console.log('imgOnLoad');
            imageHeight = dynamicImage.height;
            imageWidth = dynamicImage.width;
            //console.log("Height = " + imageHeight + " & width = " + imageWidth);

            var displayString = JSON.stringify({ imageHeight, imageWidth }); 
            UpdateTextDivObject(displayString);

            dynamicImage.style.display = "none"; // this means that although we've loaded the image, we are not going to display it
            initCanvasElements(); 
            //window.URL.revokeObjectURL(dynamicImage.src);
            $("body").css("cursor", "default");
        }

        var displayWidth;
        var displayHeight; 
        var scaleWidthFactor = 1.0;
        var scaleHeightFactor = 1.0;

        function initCanvasElements() {
            drawAllCanvas();
            addImageCanvasEventListeners(); 
        }

        function drawAllCanvas() {
            drawImageCanvas();
            drawTopCanvas();
            drawSideCanvas();
        }

        function drawImageCanvas() {
            var ctx = imageCanvas.getContext("2d");

            displayWidth = imageWidth;
            if (imageWidth > maxWidth) {
                displayWidth = maxWidth;
                scaleWidthFactor = imageWidth / displayWidth;
            }

            displayHeight = imageHeight;
            if (imageHeight > maxHeight) {
                displayHeight = maxHeight;
                scaleHeightFactor = imageHeight / displayHeight;
            }


            imageCanvas.setAttribute("width", displayWidth);
            imageCanvas.setAttribute("height", displayHeight);
            ctx.drawImage(dynamicImage, 0, 0, displayWidth, displayHeight);
        }

        function drawTopCanvas() {
            topCanvas.setAttribute("width", displayWidth);
            topCanvas.setAttribute("height", rowDim);
            var topCtx = topCanvas.getContext("2d");
            drawHorizontalRuler(topCtx, displayWidth, rowDim);
        }

        function drawSideCanvas() {
            sideCanvas.setAttribute("width", rowDim);
            sideCanvas.setAttribute("height", displayHeight);
            var sideCtx = sideCanvas.getContext("2d");
            drawVerticalRuler(sideCtx, rowDim, displayHeight); 
        }

        function addImageCanvasEventListeners() {
            // Add our event handlers
            // add event listeners
            imageCanvas.addEventListener('click', (e) => {
                const mousePos = {
                    x: e.clientX - imageCanvas.offsetTop,
                    y: e.clientY - imageCanvas.offsetLeft,
                    orgX: e.clientX,
                    orgY: e.clientY
                };
                onCanvasclick(mousePos);
            });


            imageCanvas.addEventListener('mousemove', (e) => {

                //console.log("Original x = " + e.clientX + " y = " + e.clientY);
                const mousePos = {
                    x: e.clientX - imageCanvas.offsetTop,
                    y: e.clientY - imageCanvas.offsetLeft,
                    orgX: e.clientX,
                    orgY: e.clientY
                };
                e.preventDefault();
                e.stopPropagation();

                onCanvasMouseOver(mousePos);
            });
        }

        var errorRange = 15;

        function onCanvasclick(evt) {
            console.log(evt);
            var r = imageCanvas.getBoundingClientRect();

            if (r.left <= evt.orgX && evt.orgX <= r.left + r.width &&
                r.top <= evt.orgY && evt.orgY <= r.top + r.height) {

                var x = evt.orgX - r.left;
                var y = evt.orgY - r.top;

                x = (x * scaleWidthFactor).toFixed(0);
                y = (y * scaleHeightFactor).toFixed(0);

                // Mark edge boundaries
                if (x > imageWidth - errorRange) x = imageWidth;
                if (x < errorRange) x = 0;
                if (y > imageHeight - errorRange) y = imageHeight; 
                if (y < errorRange) y = 0; 

                // lets store these values in our array
                var jsonObj = '[' + x.toString() + ',' + y.toString() + ']'; 
                console.log(jsonObj);
                selectedMaskPoints.push(jsonObj); 

                updateMaskDisplay();
            }
        }

        function updateMaskDisplay() {
            if (selectedMaskPoints.length > 0) {
                $('#txtMaskPoints').val(''); 
                var displayString = '[';
                
                for (var i = 0; i < selectedMaskPoints.length; i++) {
                    displayString += selectedMaskPoints[i];
                    if (i < selectedMaskPoints.length - 1) {
                        displayString += ' , ';
                    }
                }

                displayString += ']';
                $('#txtMaskPoints').val(displayString); 
            }
            else {
                console.log('selectedMaskPoints length = 0');
            }
        }

        function onCanvasMouseOver(evt) {
            
            var ctx = imageCanvas.getContext("2d");
            var topCtx = topCanvas.getContext("2d");
            var sideCtx = sideCanvas.getContext("2d");

            var height = imageHeight;
            var width = imageWidth;

            var r = imageCanvas.getBoundingClientRect();

            if (r.left <= evt.orgX && evt.orgX <= r.left + r.width &&
                r.top <= evt.orgY && evt.orgY <= r.top + r.height) {

                var x = evt.orgX - r.left;
                var y = evt.orgY - r.top;

                //console.log("x = " + x + " y = " + y);

                ctx.drawImage(dynamicImage, 0, 0, displayWidth, displayHeight);

                ctx.strokeStyle = '#fff';
                ctx.lineWidth = 3;
 
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + 1, y + 1);

                ctx.lineWidth = 1;

                ctx.moveTo(x, 0);
                ctx.lineTo(x, y - 5);

                ctx.moveTo(x + 5, y);
                ctx.lineTo(width, y);

                ctx.stroke();

                // horizontal ruler
                drawHorizontalRuler(topCtx, width, rowDim);
                // previous Style 
                var preStyle = sideCtx.strokeStyle;
                topCtx.strokeStyle = '#0f0'; //  ??
                topCtx.beginPath();
                topCtx.moveTo(x, (rowDim * .2));
                topCtx.lineTo(x, (rowDim));
                topCtx.fillText((x*scaleWidthFactor).toFixed(0), x, rowDim * .8);
                topCtx.stroke();
                // restore style
                topCtx.strokeStyle = preStyle;


                // vertical ruler
                drawVerticalRuler(sideCtx, rowDim, height);

                // previous Style 
                var preStyle = sideCtx.strokeStyle;
                sideCtx.strokeStyle = '#f00'; // red ??
                sideCtx.beginPath();
                sideCtx.moveTo(0, y);
                sideCtx.lineTo((rowDim * .6), y);
                sideCtx.fillText((y*scaleHeightFactor).toFixed(0), (rowDim * .6), y);
                sideCtx.stroke();
                // restore style
                sideCtx.strokeStyle = preStyle;

            }

            //updateResult("onCanvasMouseOver");

        }

        function drawHorizontalRuler(ctx, width, height) {
            // draw a line mid way througn to the end
            ctx.clearRect(0, 0, width, height);

            baseheight = height / 2 - 10;

            ctx.moveTo(0, baseheight);
            ctx.lineTo(width, baseheight);
            ctx.stroke();

            makers = getMarkers(width);

            var tickDistance = 96 / 25.4; // hard coded dpi and cms in an inch measurement

            var numTicks = width / tickDistance;

            var y0 = makers[0];
            // Bug that the first one is not displayed correctly
            ctx.stroke();
            ctx.beginPath();
            ctx.moveTo(0, baseheight);
            ctx.lineTo(0, baseheight + y0);
            ctx.stroke();
            ctx.beginPath();

             

            for (var i = 0; i < numTicks; ++i) {
                var x = i * tickDistance;
                var y = makers[i % makers.length];
                ctx.moveTo(x, baseheight);
                ctx.lineTo(x, baseheight + y);
                if (i % (makers.length*2) == 0) {
                    //ctx.fillText(i/makers.length, x + 3, y-20);
                    ctx.fillText((i * tickDistance * scaleWidthFactor).toFixed(0), x + 3, y - 20);
                }

                ctx.stroke();
                ctx.beginPath();
            }
        }

        function drawVerticalRuler(ctx, width, height) {
            // draw a line mid way througn to the end


            ctx.clearRect(0, 0, width, height);

            baseWidth = width / 2;

            ctx.moveTo(baseWidth, 0);
            ctx.lineTo(baseWidth, height);
            ctx.stroke();

            makers = getMarkers(width);

            var tickDistance = 96 / 25.4

            var numTicks = height / tickDistance;

            var y0 = makers[0];
            // Bug that the first one is not displayed correctly
            ctx.stroke();
            ctx.beginPath();
            ctx.moveTo(baseWidth, 0);
            ctx.lineTo(baseWidth - y0, 0);
            ctx.stroke();
            ctx.beginPath();

            for (var i = 0; i < numTicks; ++i) {
                var x = i * tickDistance;
                var y = makers[i % makers.length];
                ctx.moveTo(baseWidth, x);
                ctx.lineTo(baseWidth - y, x);
                if (i % makers.length == 0) {
                    //ctx.fillText(i/makers.length, baseWidth + 3, x);
                    if (i == 0) {
                        ctx.fillText((i * tickDistance * scaleHeightFactor).toFixed(0), baseWidth + 3, x+10);
                    } else {
                        ctx.fillText((i * tickDistance * scaleHeightFactor).toFixed(0), baseWidth + 3, x);
                    }
                    
                }
            }

            ctx.closePath();
            ctx.stroke();


        }

        function getMarkers() {
            markers = [];
            markers = [30, 10, 10, 10, 10, 20, 10, 10, 10, 10];
            return markers;
        }

        function drawOuterRectangle(ctx, width, height) {
            ctx.moveTo(0, 0);
            ctx.lineTo(width, 0);
            ctx.stroke();
            ctx.moveTo(width, 0);
            ctx.lineTo(width, height);
            ctx.stroke();
            ctx.moveTo(width, height);
            ctx.lineTo(0, height);
            ctx.stroke();
            ctx.moveTo(0, height);
            ctx.lineTo(0, 0);
            ctx.stroke();
        }

        function UpdateTextDivObject(displayString) {
            $('#lblImageDimensions').text(displayString);
        }

        var maskFileName = 'mask_file.txt';

        function btnSaveMaskTagsHandler() {
            console.log('btnSaveMaskTagsHandler');
            var fileString = $('#txtMaskPoints').val(); 

            if (fileString == null || fileString.length < 1) {
                alert('Nothing in Mask Points!');
                return false;
            }


            fileService = getFileService();
            if (fileService != null) {
                console.log('fileService');
                fileService.createFileFromText(sourceShare, sourceDirectory, maskFileName, fileString, callback=fileServiceSaveCallBack);
            }
        }

        function fileServiceSaveCallBack(error, result, response) {
            console.log('fileServiceSaveCallBack');
            if (!error) {
                var result = 'File creation successful'; 
                $('#lblResult').text(result);
            }
            else {
                var r = 'ERROR in FILE CREATION';
                $('#lblResult').text(r + " : " + result + " : " + response);
            }
        }

        function getFileService() {
            console.log('getFileService');
            if (!checkParameters())
                return null;
            fileUri = 'https://' + account + '.file.core.windows.net';
            var fileService = AzureStorage.File.createFileServiceWithSas(fileUri, sas).withFilter(new AzureStorage.File.ExponentialRetryPolicyFilter());
            return fileService;
        }

        function getMaskTagsFromFile() {
            console.log('btnSaveMaskTagsHandler');

            fileService = getFileService();
            if (fileService != null) {
                fileService.createFileFromText(sourceShare, sourceDirectory, maskFileName, fileString, callback = fileServiceGetCallBack);
            }


        function fileServiceGetCallBack(error, text, result, response) {
            console.log('fileServiceGetCallBack');
            if (!error) {
                var r = 'File creation successful';
                $('#lblResult').text(r);
                $('#txtMaskPoints').val(text);
            }
            else {
                var r = 'ERROR in FILE READ';
                $('#lblResult').text(r + " : " + result + " : " + response);
            }
        }
        }

        function btnLoadMaskImageHandler() {
            console.log("btnLoadMaskImageHandler");
            var checkOK = checkParameters();
            if (!checkOK)
                return;

            var jsonData = {
                _sourceFileShareFolderName: sourceShare, _sourceDirectoryName: sourceDirectory,
                _imageFileName: imageFileName, _maskTags: selectedMaskPoints
            };
            console.log(jsonData);
            var updatedTagJson = JSON.stringify(jsonData);
            console.log(updatedTagJson);
            InvokeWebAPI(updatedTagJson);
        }

        var invocation = new XMLHttpRequest();
        var invocationHistoryText;


        function InvokeWebAPIGetAllExperiments(dataval) {
            console.log('InvokeWebAPIGetAllExperiments');
            $("body").css("cursor", "progress");
            var body = dataval;

            var url = 'http://localhost:5000/azureStorage/v1.0/GetAllExperimentsAndFirstFiles';
            console.log(url);

            if (invocation) {
                invocation.open('POST', url, true);
                invocation.setRequestHeader('Content-Type', 'application/json');
                invocation.onreadystatechange = handlerGetAllExperiments;
                invocation.send(body);
            }
            else {
                UpdateTextDivObject("No Invocation TookPlace At All");
            }
        }


        function handlerGetAllExperiments(evtXHR) {
            if (invocation.readyState == 4) {
                if (invocation.status == 200) {
                    UpdateTextDivObject(invocation.responseText);
                    $("body").css("cursor", "default");
                }
                else {
                    var AppendedText = "Invocation Errors Occured " + invocation.readyState + " and the status is " + invocation.status;
                    UpdateTextDivObject(AppendedText);
                    $("body").css("cursor", "default");
                }
            }
            else {
                UpdateTextDivObject("currently the application is at" + invocation.readyState);
            }
        }


        function InvokeWebAPI(dataVal) {
            console.log('InvokeWebAPI');
            $("body").css("cursor", "progress");
            var body = dataVal;
            
            //var urlEncodeCollectionId = encodeURIComponent(body);
            //console.log(urlEncodeCollectionId);

            var url = 'http://localhost:5000/azureStorage/v1.0/GetMaskedImage';
            console.log(url);

            if (invocation) {
                addInvocationListeners();
                invocation.open('POST', url, true);
                invocation.responseType = "blob"; //"arraybuffer"; //"blob"; // blob returns the entire content I think.  
                invocation.setRequestHeader('Content-Type', 'application/json');
                invocation.onreadystatechange = handler;
                invocation.send(body);
            }
            else {
                UpdateTextDivObject("No Invocation TookPlace At All");
            }
        }

        // progress on transfers from the server to the client (downloads)
        function updateProgress(oEvent) {
            if (oEvent.lengthComputable) {
                var percentComplete = oEvent.loaded / oEvent.total * 100;
                console.log(percentComplete);
            } else {
                console.log('Unable to compute progress information since the total size is unknown');
            }
        }

        function transferComplete(evt) {
            console.log("The transfer is complete.");

            //dynamicImage.style.display = '';
            //dynamicImage.src = "data: image/jpeg;base64," + decodeArrayBuffer(invocation.response);

            console.log("Trying Text...");
            //dynamicImage.style.display = '';
            //dynamicImage.src = "data: image/jpeg;base64," + decodeArrayBuffer(invocation.responseText);

            //var ctx = imageCanvas.getContext("2d");

            //displayWidth = imageWidth;
            //if (imageWidth > maxWidth) {
            //    displayWidth = maxWidth;
            //    scaleWidthFactor = imageWidth / displayWidth;
            //}

            //displayHeight = imageHeight;
            //if (imageHeight > maxHeight) {
            //    displayHeight = maxHeight;
            //    scaleHeightFactor = imageHeight / displayHeight;
            //}


            //imageCanvas.setAttribute("width", displayWidth);
            //imageCanvas.setAttribute("height", displayHeight);
            //ctx.drawImage(invocation.responseText, 0, 0, displayWidth, displayHeight);

            
            removeInvocationListeners();
            UpdateTextDivObject("Data obtained, transferComplete");
        }

        function transferFailed(evt) {
            console.log("An error occurred while transferring the file.");
            removeInvocationListeners();
        }

        function transferCanceled(evt) {
            console.log("The transfer has been canceled by the user.");
            removeInvocationListeners();
        }

        function addInvocationListeners() {
            invocation.addEventListener("progress", updateProgress);
            invocation.addEventListener("load", transferComplete);
            invocation.addEventListener("error", transferFailed);
            invocation.addEventListener("abort", transferCanceled);
        }

        function removeInvocationListeners() {
            invocation.removeEventListener("progress", updateProgress);
            invocation.removeEventListener("load", transferComplete);
            invocation.removeEventListener("error", transferFailed);
            invocation.removeEventListener("abort", transferCanceled);
        }

        function handler(evtXHR) {
            if (invocation.readyState == 4) {
                if (invocation.status == 200) {
                    //data = "data:" + response.headers["content-type"] + ";base64," + new Buffer(body).toString('base64');
                    //console.log(data);
                    //invocatio
                    // var response = ;
                    // lets set this to an image source. 
                    //UpdateTextDivObject(invocation.responseText);
                    //console.log('invocation.responseText');
                    //console.log(invocation.responseType);
                    //dynamicImage.style.display = '';
                    //dynamicImage.src = "data: image/jpeg;base64," + decodeArrayBuffer(invocation.responseText);
                    //console.log('responseText');
                    //decodeArrayBuffer(invocation.responseText);

                    //saveByteArray(invocation.responseText, 'responseText.jpg');
                  

                    if (invocation.response) {
                        console.log('blobReturned');
                        //decodeArrayBuffer(invocation.response);

                        var blob = invocation.response;

                        //var img = document.createElement('img');
                        dynamicImage.onload = imgOnLoad; // Reminder once again; function (e) {
                        //    window.URL.revokeObjectURL(dynamicImage.src); // Clean up after yourself.
                        //};
                        dynamicImage.src = window.URL.createObjectURL(blob);
                        //imgOnLoad();
                        //document.body.appendChild(img);
                        //dynamicImage.style.display = '';
                        //dynamicImage.src = "data: image/jpeg;base64," + decodeArrayBuffer(blobReturned);
                        
                        //saveByteArray(blobReturned, 'blobReturned.jpg');
                    }
                    else {
                        console.log('Blob null');
                    }
                    
                    UpdateTextDivObject("Data obtained");
                    $("body").css("cursor", "default");
                }
                else {
                    var AppendedText = "Invocation Errors Occured " + invocation.readyState + " and the status is " + invocation.status;
                    UpdateTextDivObject(AppendedText);
                    $("body").css("cursor", "default");
                }
            }
            else {
                UpdateTextDivObject("currently the application is at" + invocation.readyState);
            }
        }

        function decodeArrayBuffer(buffer) {
            //https://stackoverflow.com/questions/4564119/javascript-convert-byte-to-image
            console.log('decodeArrayBuffer');

            var byteArray = new Uint8Array(buffer);
            console.log('length =' + byteArray.byteLength.toString());
            //for (var i = 0; i < byteArray.byteLength; i++) {
            for (var i = 0; i < 32; i++) {
                // do something with each byte in the array
                console.log(byteArray[i].toString(16));
            }

            //var mime;
            //var lengthOfBuffer = buffer.size; 
            
           
            //var a = new Uint8Array(lengthOfBuffer);
            //for (var j = 0; j < lengthOfBuffer; j++) {
            //    a[j] = buffer[j];
            //}

            //console.log('Dumping image contents');
            //for (var k = 0; k < 32; k++) {
            //    console.log(a[k].toString(16));
            //    console.log(typeof buffer[k]);
            //    console.log(buffer[k].toString(16));
            //    console.log(buffer[k].length);
            //}

            var nb = byteArray.byteLength;
            
            if (nb < 4) {
                console.log('length < 4');
                return null;
            }

            var b0 = byteArray[0]; 
            var b1 = byteArray[1]; 
            var b2 = byteArray[2]; 
            var b3 = byteArray[3]; 
       
            if (b0 == 0x89 && b1 == 0x50 && b2 == 0x4E && b3 == 0x47)
                mime = 'image/png';
            else if (b0 == 0xff && b1 == 0xd8)
                mime = 'image/jpeg';
            else if (b0 == 0x47 && b1 == 0x49 && b2 == 0x46)
                mime = 'image/gif';
            else {
                console.log('unknown  format');
                return null;
            }

            console.log(mime);

            var binary = "";
            for (var i = 0; i < nb; i++)
                binary += String.fromCharCode(byteArray[i]);
            var base64 = window.btoa(binary);
            //var image = new Image();
            //image.onload = onLoad;
            //image.src = 'data:' + mime + ';base64,' + base64;
            return base64;
        }

        var saveByteArray = (function () {
            console.log('saveByteArray');
            var a = document.createElement("a");
            document.body.appendChild(a);
            a.style = "display: none";
            return function (data, name) {
                console.log('inside');
                var blob = new Blob(data, { type: "octet/stream" }),
                    url = window.URL.createObjectURL(blob);
                console.log(url);
                a.href = url;
                a.download = name;
                a.click();
                window.URL.revokeObjectURL(url);
            };
        }());

        function UpdateTextDivObject(displayString) {
            //console.log(displayString);

            var temp = document.createTextNode(displayString);
            var textDiv = document.getElementById("lblResult");
            textDiv.appendChild(temp);

            //$('#lblResult').text(displayString);
        }

    </script>

}


