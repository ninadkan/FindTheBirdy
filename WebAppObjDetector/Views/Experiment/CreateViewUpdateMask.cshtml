
@{
    ViewData["Title"] = "CreateAndViewMask";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    * {
        box-sizing: border-box;
    }

    .column {
        float: left;
        margin-left: 20px;
    }

    .colnk {
        float: left;
    }

    /* Clearfix (clear floats) */
    .row::after {
        content: "";
        clear: both;
        display: table;
    }
</style>

<h2>Create, View and Update Image Masks</h2>


<div id="devOperations">
    <table class="table table-condensed" align="center">
        <tbody>
            <tr valign="middle">
                <th align="center" width="30%"></th>
                <th align="center" width="40%"></th>
                <th align="center" width="30%"></th>
            </tr>

            <tr align="center" valign="middle">
                <td align="right"><label class="col-md-12 control-label">Source Share</label></td>
                <td align="left" colspan="2"><input id="txtSourceShare" name="txtSourceShare" value="experiment-data" /></td>
            </tr>

            <tr align="center" valign="middle">
                <td align="right"><label class="col-md-12 control-label">Source Directory</label></td>
                <td align="left" colspan="2"><input class="btn-block" id="txtSourceDirectory" name="txtSourceDirectory" value="object-detection" /></td>
            </tr>

            <tr align="center" valign="middle">
                <td align="right"><label class="col-md-12 control-label">Experiment Name</label></td>
                <td><select name="ExperimentCollection" id="ExperimentCollection" class="form-control col-md-12"></select></td>
            </tr>

            <tr align="center" valign="middle">
                <td align="right"><label class="col-md-12 control-label">Image File Name</label></td>
                <td align="left"><input id="txtImageFileName" name="txtImageFileName" /></td>
                <td align="left"><label id="lblImageDimensions"> Image Dimensions </label></td>
            </tr>

            <tr align="center" valign="middle">
                <td align="right"><label class="col-md-12 control-label">Mask file content </label></td>
                <td align="center" colspan="2"><input class="btn-block" id="txtMaskPoints" /></td>
            </tr>

            <tr>
                <td align="center"><button id="btnLoadExperiments" class="btn btn-info" onclick="btnLoadExperimentsHandler()">Refresh (Load Experiments)</button></td>
                <td align="center"><button id="btnLoadImage" class="btn btn-primary" onclick="btnLoadImageHandler()">Load Image</button></td>
                <td align="center">
                    <button id="btnUpdateMaskTags" class="btn btn-success" onclick="btnUpdateMaskTagsHandler()">Start Mask Update</button>
                    <button id="btnSaveMask" class="btn btn-success" onclick="btnSaveMaskHandler()">Save Mask</button>
                </td>
            </tr>

            <tr align="center" valign="middle">
                <td align="right"><label class="col-md-12 control-label">Operation Result  : </label></td>
                <td align="left" colspan="2"><label class="btn-block" id="lblResult"></label></td>
            </tr>
        </tbody>
    </table>
</div>

<hr />

<div id="devOperations">
    <table>
        <tbody>
            <tr valign="middle">
                <th align="center" width="50%"></th>
              
                <th align="center" width="50%"></th>
            </tr>
            <tr valign="middle">
                <td align="center"><label> Original Image: </label></td>
                <td align="center"><label> Masked Image: </label></td>
            </tr>
            <tr>
                <td>
                    <div id=divCanvas>
                        <canvas id="topCanvas"></canvas>
                    </div>
                </td>
                <td align="center"><label class="btn-block"> </label></td>
            </tr>
            <tr>
                <td>
                    <div>
                        <canvas id="imageCanvas"></canvas>
                        <canvas id="sideCanvas"></canvas>
                    </div>
                </td>
                
                <td>
                    <div class="column">
                        <img id="maskImage" alt="ALT">
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="divImg">
    <img id="dynamicImage"
         src="" alt="ALT">
</div>



@*<h6>Images :</h6>
    <div id="divImg">
        <img id="dynamicImage"
             src="" alt="ALT">
    </div>
    <div class="row" id=divCanvas>
        <canvas id="topCanvas"></canvas>
    </div>
    <div class="row">
        <div class="colnk">
            <canvas id="imageCanvas"></canvas>
        </div>
        <div class="colnk">
            <canvas id="sideCanvas"></canvas>
        </div>
        <div class="column">
            <img id="maskImage" alt="ALT">
        </div>
    </div>*@



@section Scripts {

    <script>
        var _sourceShare = '';
        var _sourceDirectory = '';
        var _imageFileName = '';

        var _btnLoadExperiments;
        var _btnLoadImage; 
        var _btnUpdateMaskTags;
        var _btnSaveMask; 

        $(function () // called when the body is ready
        {
            console.log("Ready");

             _btnLoadExperiments = document.getElementById('btnLoadExperiments');
             _btnLoadImage = document.getElementById('btnLoadImage');
             _btnUpdateMaskTags = document.getElementById('btnUpdateMaskTags');
             _btnSaveMask = document.getElementById('btnSaveMask');

            $('#ExperimentCollection').on('change', onExperimentCollChanged);
            // ensure that the text displayed is the correct one for our button
            $('#btnUpdateMaskTags').val(_txtStartMaskUpdate);
            getAllNeededValues();
        });

        function checkNecessaryParameters() {
            getAllNeededValues();

            if (_sourceShare == null || _sourceShare.length < 1) {
                alert('Please enter a valid storage sourceShare name!');
                return false;
            }

            // check additional parameters
            if (_sourceDirectory == null || _sourceDirectory.length < 1) {
                alert('Please enter a valid Source Directory name!');
                return false;
            }
            return true;
        }

        function getAllNeededValues() {
            _sourceShare = document.getElementById('txtSourceShare').value;
            _sourceDirectory = document.getElementById('txtSourceDirectory').value;
        }

        var invocation = new XMLHttpRequest();
 
        function btnLoadExperimentsHandler() {
            $("body").css("cursor", "progress");

            var checkOK = checkNecessaryParameters();
            if (!checkOK)
                return;

            var jsonData = {
                _sourceFileShareFolderName: _sourceShare, _sourceDirectoryName: _sourceDirectory
            };

            var updatedTagJson = JSON.stringify(jsonData);
            _btnLoadExperiments.setAttribute("class", "btn btn-default");
            InvokeWebAPIGeneric('GetAllExperimentsAndFirstFiles', updatedTagJson, handlerGetAllExperiments )
        }

        function InvokeWebAPIGeneric(urlAdd, dataval, handler) {
            $("body").css("cursor", "progress");
            
            var body = dataval;

            var url = 'http://localhost:5000/azureStorage/v1.0/' + urlAdd;

            if (invocation) {
                invocation.open('POST', url, true);
                invocation.setRequestHeader('Content-Type', 'application/json');
                invocation.onreadystatechange = handler;
                invocation.send(body);
            }
            else {
                UpdateTextDivObject("No Invocation TookPlace At All");
            }
        }

        function handlerGetAllExperiments(evtXHR) {
            if (invocation.readyState == 4) {
                if (invocation.status == 200) {
                    populateComboBox(invocation.responseText);
                    onExperimentCollChanged();
                }
                else {
                    var AppendedText = " Invocation Errors Occured " + invocation.readyState + " and the status is " + invocation.status;
                    UpdateTextDivObject(AppendedText);
                }
                _btnLoadExperiments.setAttribute("class", "btn btn-info");
                $("body").css("cursor", "default");
             }
        }

        function populateComboBox(response) {
            $('#ExperimentCollection').empty();
            var result = $.parseJSON(response);


            $.each(result, function (i, item) {
                var experiment = item['experimentName'];
                var fileName = item['filename'];
                var maskTagsJson = item['maskContent'];

                var maskTags = '['
                for (var i = 0, l = maskTagsJson.length; i < l; i++) {
                    maskTags += '[';
                    maskTags += maskTagsJson[i];
                    maskTags += ']';

                    if (i < l - 1) {
                        maskTags += ','
                    }
                }
                maskTags += ']';



                var option = '';

                option += '<option value="' + fileName + ";" + maskTags + '">' + experiment + '</option>';
                $('#ExperimentCollection').append(option);
            });
        }

        function btnLoadImageHandler() {
            loadImage();
        }

        function onExperimentCollChanged() {
            $("body").css("cursor", "progress");

            var comboBoxValue = $('#ExperimentCollection option:selected').val();

            var n = comboBoxValue.indexOf(";");
            var filename = comboBoxValue.substring(0, n);
            var maskTags = comboBoxValue.substring(n + 1);

            // update values
            $('#txtImageFileName').val(filename);
            $('#txtMaskPoints').val(maskTags);

            // Now invoke the web service call to get details about the images.
            // That will call the next web service call automatically
            loadImage();

            $("body").css("cursor", "default");
        }

        var _maskTags = '';
        var _experimentName = '';

        function checkExtraParameters() {
            _imageFileName = $('#txtImageFileName').val();
            if (_imageFileName == null || _imageFileName.length < 1) {
                alert('Please enter a valid image File name!');
                return false;
            }

            _experimentName = $('#ExperimentCollection option:selected').text();

            if (_experimentName == null || _experimentName.length < 1) {
                alert('Please select correct experiment first!');
                return false;
            }

            _maskTags = $('#txtMaskPoints').val();
            if (_maskTags == null || _maskTags.length < 1) {
                alert('Please enter a valid Masks Tags name!');
                return false;
            }

            return true;
        }

        function precheckLoadingImages() {
            var checkOK = checkNecessaryParameters();
            if (!checkOK)
                return false;

            checkOK = checkExtraParameters();
            if (!checkOK)
                return false;
            return true; 
        }

        function loadImage() {
            if (!precheckLoadingImages()) return; 
            $("body").css("cursor", "progress");

            var jsonData = {
                _sourceFileShareFolderName: _sourceShare,
                _sourceDirectoryName: _sourceDirectory + "/" + _experimentName,
                _imageFileName: _imageFileName
            };
            var updatedJson = JSON.stringify(jsonData);
            
            _btnLoadImage.setAttribute("class", "btn btn-default");
            InvokeWebAPIImageGeneric('GetRawSourceImage', updatedJson, HandlerGetRawImage);
            $("body").css("cursor", "default");
        }

        function HandlerGetRawImage() {
            if (invocation.readyState == 4) {
                if (invocation.status == 200) {
                    if (invocation.response) {
                        _dynamicImage.onload = imgOnLoad;
                        _dynamicImage.src = window.URL.createObjectURL(invocation.response);
                    }

                    //UpdateTextDivObject("Data obtained");
                    $("body").css("cursor", "default");
                }
                else {
                    var AppendedText = "Invocation Errors Occured " + invocation.readyState + " and the status is " + invocation.status;
                    UpdateTextDivObject(AppendedText);
                    $("body").css("cursor", "default");
                }
            }
            $("body").css("cursor", "default");
        }

        function imgOnLoad() {
            _imageHeight = dynamicImage.height;
            _imageWidth = dynamicImage.width;

            var displayString = JSON.stringify({ _imageHeight, _imageWidth });

            $('#lblImageDimensions').text(displayString);
            dynamicImage.style.display = "none"; // this means that although we've loaded the image, we are not going to display it
            initCanvasElements();
            loadMaskedImage();
            $("body").css("cursor", "default");
        }

        function InvokeWebAPIImageGeneric(apiFn, dataval, handler) {
            $("body").css("cursor", "progress");
            var body = dataval;

            var url = 'http://localhost:5000/azureStorage/v1.0/' + apiFn;

            if (invocation) {
                invocation.open('POST', url, true);
                invocation.responseType = "blob";
                invocation.setRequestHeader('Content-Type', 'application/json');
                invocation.onreadystatechange = handler;
                invocation.send(body);
            }
            else {
                UpdateTextDivObject("No Invocation TookPlace At All");
            }
        }

        function loadMaskedImage() {

            precheckLoadingImages();
            $("body").css("cursor", "progress");

            var jsonData = {
                _sourceFileShareFolderName: _sourceShare,
                _sourceDirectoryName: _sourceDirectory + "/" + _experimentName,
                _imageFileName: _imageFileName,
                _maskTags: _maskTags
            };
            var updatedTagJson = JSON.stringify(jsonData);

            InvokeWebAPIImageGeneric('GetMaskedImage', updatedTagJson, HandlerGetMaskmage);
            $("body").css("cursor", "default");
        }

        function HandlerGetMaskmage() {
            if (invocation.readyState == 4) {
                if (invocation.status == 200) {
                    if (invocation.response) {
                        var maskImage = document.getElementById('maskImage');
                        maskImage.setAttribute("width", _maxWidth);
                        maskImage.setAttribute("height", _maxHeight);
                        maskImage.src = window.URL.createObjectURL(invocation.response);
                    }
                    $("body").css("cursor", "default");
                }
                else {
                    var AppendedText = "Invocation Errors Occured " + invocation.readyState + " and the status is " + invocation.status;
                    UpdateTextDivObject(AppendedText);
                    $("body").css("cursor", "default");
                }
                $("body").css("cursor", "default");
                _btnLoadImage.setAttribute("class", "btn btn-primary");
            }
            $("body").css("cursor", "default");            //HandlerGetRawImage();
        }

        function UpdateTextDivObject(displayString) {
            var temp = document.createTextNode(displayString);
            var textDiv = document.getElementById("lblResult");
            textDiv.appendChild(temp);
        }

        /* ====================== Canvas Handlers =====================================*/
        var _imageHeight;
        var _imageWidth;
        var _rowDim = 50;
        var _maxHeight = 400;
        var _maxWidth = 500;
        var _dynamicImage = document.getElementById("dynamicImage");
        var _imageCanvas = document.getElementById("imageCanvas");
        var _topCanvas = document.getElementById("topCanvas");
        var _sideCanvas = document.getElementById("sideCanvas");
        var _displayWidth;
        var _displayHeight;
        var _scaleWidthFactor = 1.0;
        var _scaleHeightFactor = 1.0;

        function initCanvasElements() {
            drawAllCanvas();
        }

        function drawAllCanvas() {
            drawImageCanvas();
            drawTopCanvas();
            drawSideCanvas();
        }

        function drawImageCanvas() {
            var ctx = imageCanvas.getContext("2d");

            _displayWidth = _imageWidth;
            if (_imageWidth > _maxWidth) {
                _displayWidth = _maxWidth;
                _scaleWidthFactor = _imageWidth / _displayWidth;
            }

            _displayHeight = _imageHeight;
            if (_imageHeight > _maxHeight) {
                _displayHeight = _maxHeight;
                _scaleHeightFactor = _imageHeight / _displayHeight;
            }

            imageCanvas.setAttribute("width", _displayWidth);
            imageCanvas.setAttribute("height", _displayHeight);
            ctx.drawImage(dynamicImage, 0, 0, _displayWidth, _displayHeight);
        }

        function drawTopCanvas() {
            topCanvas.setAttribute("width", _displayWidth);
            topCanvas.setAttribute("height", _rowDim);
            var topCtx = topCanvas.getContext("2d");
            drawHorizontalRuler(topCtx, _displayWidth, _rowDim);
        }

        function drawSideCanvas() {
            sideCanvas.setAttribute("width", _rowDim);
            sideCanvas.setAttribute("height", _displayHeight);
            var sideCtx = sideCanvas.getContext("2d");
            drawVerticalRuler(sideCtx, _rowDim, _displayHeight);
        }

        function drawHorizontalRuler(ctx, width, height) {
            // draw a line mid way througn to the end
            ctx.clearRect(0, 0, width, height);

            baseheight = height / 2 - 10;

            ctx.moveTo(0, baseheight);
            ctx.lineTo(width, baseheight);
            ctx.stroke();

            makers = getMarkers(width);

            var tickDistance = 96 / 25.4; // hard coded dpi and cms in an inch measurement

            var numTicks = width / tickDistance;

            var y0 = makers[0];
            // Bug that the first one is not displayed correctly
            ctx.stroke();
            ctx.beginPath();
            ctx.moveTo(0, baseheight);
            ctx.lineTo(0, baseheight + y0);
            ctx.stroke();
            ctx.beginPath();



            for (var i = 0; i < numTicks; ++i) {
                var x = i * tickDistance;
                var y = makers[i % makers.length];
                ctx.moveTo(x, baseheight);
                ctx.lineTo(x, baseheight + y);
                if (i % (makers.length * 2) == 0) {
                    //ctx.fillText(i/makers.length, x + 3, y-20);
                    ctx.fillText((i * tickDistance * _scaleWidthFactor).toFixed(0), x + 3, y - 20);
                }

                ctx.stroke();
                ctx.beginPath();
            }
        }

        function drawVerticalRuler(ctx, width, height) {
            // draw a line mid way througn to the end


            ctx.clearRect(0, 0, width, height);

            baseWidth = width / 2;

            ctx.moveTo(baseWidth, 0);
            ctx.lineTo(baseWidth, height);
            ctx.stroke();

            makers = getMarkers(width);

            var tickDistance = 96 / 25.4

            var numTicks = height / tickDistance;

            var y0 = makers[0];
            // Bug that the first one is not displayed correctly
            ctx.stroke();
            ctx.beginPath();
            ctx.moveTo(baseWidth, 0);
            ctx.lineTo(baseWidth - y0, 0);
            ctx.stroke();
            ctx.beginPath();

            for (var i = 0; i < numTicks; ++i) {
                var x = i * tickDistance;
                var y = makers[i % makers.length];
                ctx.moveTo(baseWidth, x);
                ctx.lineTo(baseWidth - y, x);
                if (i % makers.length == 0) {
                    //ctx.fillText(i/makers.length, baseWidth + 3, x);
                    if (i == 0) {
                        ctx.fillText((i * tickDistance * _scaleHeightFactor).toFixed(0), baseWidth + 3, x + 10);
                    } else {
                        ctx.fillText((i * tickDistance * _scaleHeightFactor).toFixed(0), baseWidth + 3, x);
                    }

                }
            }

            ctx.closePath();
            ctx.stroke();


        }

        function getMarkers() {
            markers = [];
            markers = [30, 10, 10, 10, 10, 20, 10, 10, 10, 10];
            return markers;
        }

        function addImageCanvasEventListeners() {
            // Add our event handlers
            // add event listeners
            imageCanvas.addEventListener('click', (e) => {
                const mousePos = {
                    x: e.clientX - imageCanvas.offsetTop,
                    y: e.clientY - imageCanvas.offsetLeft,
                    orgX: e.clientX,
                    orgY: e.clientY
                };
                onCanvasclick(mousePos);
            });


            imageCanvas.addEventListener('mousemove', (e) => {

                const mousePos = {
                    x: e.clientX - imageCanvas.offsetTop,
                    y: e.clientY - imageCanvas.offsetLeft,
                    orgX: e.clientX,
                    orgY: e.clientY
                };
                e.preventDefault();
                e.stopPropagation();

                onCanvasMouseOver(mousePos);
            });
        }

        var errorRange = 15;

        function onCanvasclick(evt) {
            var r = imageCanvas.getBoundingClientRect();

            if (r.left <= evt.orgX && evt.orgX <= r.left + r.width &&
                r.top <= evt.orgY && evt.orgY <= r.top + r.height) {

                var x = evt.orgX - r.left;
                var y = evt.orgY - r.top;

                x = (x * _scaleWidthFactor).toFixed(0);
                y = (y * _scaleHeightFactor).toFixed(0);

                // Mark edge boundaries
                if (x > _imageWidth - errorRange) x = _imageWidth;
                if (x < errorRange) x = 0;
                if (y > _imageHeight - errorRange) y = _imageHeight;
                if (y < errorRange) y = 0;

                // lets store these values in our array
                var jsonObj = '[' + x.toString() + ',' + y.toString() + ']';
                selectedMaskPoints.push(jsonObj);

                updateMaskDisplay();
            }
        }

        function updateMaskDisplay() {
            if (selectedMaskPoints.length > 0) {
                $('#txtMaskPoints').val('');
                var displayString = '[';

                for (var i = 0; i < selectedMaskPoints.length; i++) {
                    displayString += selectedMaskPoints[i];
                    if (i < selectedMaskPoints.length - 1) {
                        displayString += ' , ';
                    }
                }

                displayString += ']';
                $('#txtMaskPoints').val(displayString);
            }
        }

        function onCanvasMouseOver(evt) {

            var ctx = imageCanvas.getContext("2d");
            var topCtx = topCanvas.getContext("2d");
            var sideCtx = sideCanvas.getContext("2d");

            var height = _imageHeight;
            var width = _imageWidth;

            var r = imageCanvas.getBoundingClientRect();

            if (r.left <= evt.orgX && evt.orgX <= r.left + r.width &&
                r.top <= evt.orgY && evt.orgY <= r.top + r.height) {

                var x = evt.orgX - r.left;
                var y = evt.orgY - r.top;

                ctx.drawImage(dynamicImage, 0, 0, _displayWidth, _displayHeight);

                ctx.strokeStyle = '#fff';
                ctx.lineWidth = 3;

                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + 1, y + 1);

                ctx.lineWidth = 1;

                ctx.moveTo(x, 0);
                ctx.lineTo(x, y - 5);

                ctx.moveTo(x + 5, y);
                ctx.lineTo(width, y);

                ctx.stroke();

                // horizontal ruler
                drawHorizontalRuler(topCtx, width, _rowDim);
                // previous Style
                var preStyle = sideCtx.strokeStyle;
                topCtx.strokeStyle = '#0f0'; //  ??
                topCtx.beginPath();
                topCtx.moveTo(x, (_rowDim * .2));
                topCtx.lineTo(x, (_rowDim));
                topCtx.fillText((x * _scaleWidthFactor).toFixed(0), x, _rowDim * .8);
                topCtx.stroke();
                // restore style
                topCtx.strokeStyle = preStyle;


                // vertical ruler
                drawVerticalRuler(sideCtx, _rowDim, height);

                // previous Style
                var preStyle = sideCtx.strokeStyle;
                sideCtx.strokeStyle = '#f00'; // red ??
                sideCtx.beginPath();
                sideCtx.moveTo(0, y);
                sideCtx.lineTo((_rowDim * .6), y);
                sideCtx.fillText((y * _scaleHeightFactor).toFixed(0), (_rowDim * .6), y);
                sideCtx.stroke();
                // restore style
                sideCtx.strokeStyle = preStyle;

            }

            //updateResult("onCanvasMouseOver");

        }

        function drawOuterRectangle(ctx, width, height) {
            ctx.moveTo(0, 0);
            ctx.lineTo(width, 0);
            ctx.stroke();
            ctx.moveTo(width, 0);
            ctx.lineTo(width, height);
            ctx.stroke();
            ctx.moveTo(width, height);
            ctx.lineTo(0, height);
            ctx.stroke();
            ctx.moveTo(0, height);
            ctx.lineTo(0, 0);
            ctx.stroke();
        }

        var errorRange = 15;
        var _txtStartMaskUpdate = 'Start Mask Update';
        var _txtStopMaskUpdate = 'Stop Mask Update';


        function btnUpdateMaskTagsHandler() {
            var btnText = $('#btnUpdateMaskTags').text();

            if (_txtStartMaskUpdate.localeCompare(btnText) == 0) {
                $('#btnUpdateMaskTags').prop('class', 'btn btn-outline-success');
                $('#btnUpdateMaskTags').html(_txtStopMaskUpdate);
                $('#txtMaskPoints').val('');
                $('#lblResult').text('Scroll, click mouse over image to update mask poinst');
                $("#txtMaskPoints").prop("readonly", true);
                addImageCanvasEventListeners();
            }
            else {
                removeImageCanvasEventListeners();
                $('#lblResult').text('');
                $("#txtMaskPoints").prop("readonly", false);
                $('#btnUpdateMaskTags').html(_txtStartMaskUpdate);
                $('#btnUpdateMaskTags').prop('class', 'btn btn-success');
            }
        }

        function addImageCanvasEventListeners() {
            imageCanvas.addEventListener('click', onCanvasclick, false);
            imageCanvas.addEventListener('mousemove', onCanvasMouseOver, false);
        }

        function removeImageCanvasEventListeners() {
            imageCanvas.removeEventListener('click', onCanvasclick, false);
            imageCanvas.removeEventListener('mousemove', onCanvasMouseOver, false);
        }

        function onCanvasclick(e) {

            const mousePos = {
                x: e.clientX - imageCanvas.offsetTop,
                y: e.clientY - imageCanvas.offsetLeft,
                orgX: e.clientX,
                orgY: e.clientY
            };

            var evt = mousePos;

            var r = imageCanvas.getBoundingClientRect();

            if (r.left <= evt.orgX && evt.orgX <= r.left + r.width &&
                r.top <= evt.orgY && evt.orgY <= r.top + r.height) {

                var x = evt.orgX - r.left;
                var y = evt.orgY - r.top;

                x = (x * _scaleWidthFactor).toFixed(0);
                y = (y * _scaleHeightFactor).toFixed(0);

                // Mark edge boundaries
                if (x > _imageWidth - errorRange) x = _imageWidth;
                if (x < errorRange) x = 0;
                if (y > _imageHeight - errorRange) y = _imageHeight;
                if (y < errorRange) y = 0;

                // lets store these values in our array
                var newPoint = '[' + x.toString() + ',' + y.toString() + ']';



                updateMaskDisplay(newPoint);
            }
        }

        function updateMaskDisplay(newPoint) {
            maskPointText = $('#txtMaskPoints').val();
            if (maskPointText.trim().length == 0) {
                var startString = '[' + newPoint + ']';
                $('#txtMaskPoints').val(startString);
            }
            else {
                var nCurrentStringLength = maskPointText.length;
                var position = nCurrentStringLength - 1;
                var output = maskPointText.slice(0, position) + newPoint + maskPointText.slice(position);

                $('#txtMaskPoints').val(output);
            }
        }

        function onCanvasMouseOver(e) {


            const mousePos = {
                x: e.clientX - imageCanvas.offsetTop,
                y: e.clientY - imageCanvas.offsetLeft,
                orgX: e.clientX,
                orgY: e.clientY
            };
            e.preventDefault();
            e.stopPropagation();

            var evt = mousePos;

            var ctx = imageCanvas.getContext("2d");
            var topCtx = topCanvas.getContext("2d");
            var sideCtx = sideCanvas.getContext("2d");

            var height = _imageHeight;
            var width = _imageWidth;

            var r = imageCanvas.getBoundingClientRect();

            if (r.left <= evt.orgX && evt.orgX <= r.left + r.width &&
                r.top <= evt.orgY && evt.orgY <= r.top + r.height) {

                var x = evt.orgX - r.left;
                var y = evt.orgY - r.top;



                ctx.drawImage(dynamicImage, 0, 0, _displayWidth, _displayHeight);

                ctx.strokeStyle = '#fff';
                ctx.lineWidth = 3;

                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + 1, y + 1);

                ctx.lineWidth = 1;

                ctx.moveTo(x, 0);
                ctx.lineTo(x, y - 5);

                ctx.moveTo(x + 5, y);
                ctx.lineTo(width, y);

                ctx.stroke();

                // horizontal ruler
                drawHorizontalRuler(topCtx, width, _rowDim);
                // previous Style
                var preStyle = sideCtx.strokeStyle;
                topCtx.strokeStyle = '#0f0'; //  ??
                topCtx.beginPath();
                topCtx.moveTo(x, (_rowDim * .2));
                topCtx.lineTo(x, (_rowDim));
                topCtx.fillText((x * _scaleWidthFactor).toFixed(0), x, _rowDim * .8);
                topCtx.stroke();
                // restore style
                topCtx.strokeStyle = preStyle;


                // vertical ruler
                drawVerticalRuler(sideCtx, _rowDim, height);

                // previous Style
                var preStyle = sideCtx.strokeStyle;
                sideCtx.strokeStyle = '#f00'; // red ??
                sideCtx.beginPath();
                sideCtx.moveTo(0, y);
                sideCtx.lineTo((_rowDim * .6), y);
                sideCtx.fillText((y * _scaleHeightFactor).toFixed(0), (_rowDim * .6), y);
                sideCtx.stroke();
                // restore style
                sideCtx.strokeStyle = preStyle;

            }

            //updateResult("onCanvasMouseOver");

        }

        function btnSaveMaskHandler() {
            if (!precheckLoadingImages()) return; 
            $("body").css("cursor", "progress");

            var jsonData = {
                _sourceFileShareFolderName: _sourceShare,
                _sourceDirectoryName: _sourceDirectory + "/" + _experimentName,
                _maskTags: _maskTags
            };
            var updatedJson = JSON.stringify(jsonData);
            _btnSaveMask.setAttribute("class", "btn btn-default");
            InvokeWebAPIGeneric('SaveMaskFileData', updatedJson, handlerSaveMaskFile)
        }

        function handlerSaveMaskFile() {
            if (invocation.readyState == 4) {
                if (invocation.status == 200) {
                    // for some reason this gives us error!!!
                    //$('#lblResult').text(invocation.responseText);
                    //$("body").css("cursor", "default");
                }
                else {
                    //var AppendedText = "Invocation Errors Occured " + invocation.readyState + " and the status is " + invocation.status;
                    //UpdateTextDivObject(AppendedText);
                    //$("body").css("cursor", "default");
                }
                $("body").css("cursor", "default");     
                _btnSaveMask.setAttribute("class", "btn btn-success");
            }
            $("body").css("cursor", "default");       
        }
    </script>
}


