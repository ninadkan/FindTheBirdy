
@{
    //ViewData["Title"] = "ResultDashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Object Detection: Results Dashboard</h2>

<div class="row">
    <div class="col-md-6">
        <p></p>
    </div>
    <div class="col-md-3">
        <label id="lblRowText"></label>
    </div>
    <div class="col-md-3">
            <label>
                Show
                <select name="cmbItemsPerPage" id="cmbItemsPerPage">
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="5">5</option>
                    <option value="10" selected="selected">10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                </select>
                items per page
            </label>
    </div>
</div>

    <div class="row" id="devOperations">
        <div class="col-md-12">
            <table class="table" align="center" style="width:100%">
                <thead>
                    <tr valign="middle">
                        <th align="center"> Experiment Date</th>
                        <th align="center"> True Images</th>
                        <th align="center"> OpenCV detected images</th>
                        <th align="center"> Yolo Result</th>
                        <th align="center"> mobileNet Result</th>
                        <th align="center"> Azure Result</th>
                        <th align="center"> Google Result</th>
                        @*<th align="center"> Result Analysis</th>*@
                    </tr>
                </thead>
                <tbody id="dynamicTable"></tbody>
            </table>
        </div>
    </div>

    <div class="center">
        <button id="btnRefresh" class="btn btn-primary" onclick="btnRefreshHandler(this)">Refresh</button>
    </div>

    <div class="center">
        <div id="divPagination">
        </div>
    </div>


    @section Scripts {
        <script>

            class Pagination{

            //    var _paginationConstants = []; 

            //constructor() {
            //    _paginationConstants = = [
            //        { id: "idPaginationStart", value: -2, displayString: "|<<", CurrentPageNumber: 1 },
            //        { id: "idPaginationPrev", value: -1, displayString: "<<", CurrentPageNumber: 1 },
            //        { id: "idPaginationOne", value: 1, displayString: "1", CurrentPageNumber: 1 },
            //        { id: "idPaginationTwo", value: 2, displayString: "2", CurrentPageNumber: 1 },
            //        { id: "idPaginationThree", value: 3, displayString: "3", CurrentPageNumber: 1 },
            //        { id: "idPaginationMiddle", value: -3, displayString: "...", CurrentPageNumber: -1 },
            //        { id: "idPaginationFour", value: 4, displayString: "4", CurrentPageNumber: 1 },
            //        { id: "idPaginationFive", value: 5, displayString: "5", CurrentPageNumber: 1 },
            //        { id: "idPaginationSix", value: 6, displayString: "6", CurrentPageNumber: 1 },
            //        { id: "idPaginationNext", value: -4, displayString: ">>", CurrentPageNumber: 1 },
            //        { id: "idPaginationEnd", value: -5, displayString: ">>|", CurrentPageNumber: 1 }
            //    ];
            //    }
            };



            var _lastButton = [];
            var _lastButtonClass = [];

            function pushElement(elementID) {
                var element = document.getElementById(elementID);
                if (element) {
                    _lastButton.push(element);
                    _lastButtonClass.push(element.getAttribute("class"));
                    element.setAttribute("class", "btn btn-default");
                    $("body").css("cursor", "progress");
                }
            }

            function popElement() {
                var element = _lastButton.pop();
                var elementClass = _lastButtonClass.pop();
                if (element) {
                    element.setAttribute("class", elementClass);
                }
                $("body").css("cursor", "default");
            }

            $(function () // called when the body is ready
            {
                console.log("Ready");
                $('#cmbItemsPerPage').on('change', oncmbItemsPerPageChanged);

                $(document).keyup(function (e) {
                    if ($('#idPaginationMiddle')) {
                        if ($('#idPaginationMiddle').is(":focus") && e.key == "Enter") {
                            gotoParticularPageIndex(document.getElementById('idPaginationMiddle').value);
                        }                       
                    }
                });
            });

            function oncmbItemsPerPageChanged() {
                _itemsPerPage = parseInt($('#cmbItemsPerPage option:selected').val(), 10);
                btnRefreshHandler(document.getElementById('btnRefresh'));
            }

            var invocationSourceFile = new XMLHttpRequest();

            function btnRefreshHandler(obj) {
                pushElement(obj.id);
                InvokeWebAPIGenericCosmocGet(invocationSourceFile, 'returnAllExperimentResult', '', handlerGetAllExperiments);
            }

            function InvokeWebAPIGenericCosmocGet(invocationObj, urlAdd, dataval, handler) {
                var url = 'http://localhost:5001/comsosDB/v1.0/' + urlAdd;

                if (invocationObj) {
                    invocationObj.open('GET', url, true);
                    invocationObj.onreadystatechange = handler;
                    invocationObj.send();
                }
                else {
                    $('#lblResult').html("No Invocation TookPlace At All");
                }
            }

            function handlerGetAllExperiments(ev) {
                if (invocationSourceFile.readyState == 4) {
                    if (invocationSourceFile.status == 200) {
                        if (invocationSourceFile.response) {
                            processSourceFileData(invocationSourceFile.response);
                        }
                    }
                    else {
                        var AppendedText = " Invocation Errors Occured " + invocationSourceFile.readyState + " and the status is " + invocationSourceFile.status;
                        $('#lblResult').html(AppendedText);
                    }
                    popElement();
                }
            }

            function processSourceFileData(data) {
                $('#dynamicTable').empty();
                if (data) {
                    var tp = $.parseJSON(data);
                    if (tp) {
                        var result = tp["result"];
                        if (result && result.length > 0) {
                            resetPaginationData();
                            _totalSize = result.length;
                            _previousResultData = result;
                            _currentSelectedPage = _basePageIndex = 1;
                            generatePaginationDisplay();
                            refreshMainPage();
                        }
                    }
                }
                popElement();
            }

            var _paginationConstants = [
                { id: "idPaginationStart", value: -2, displayString: "|<<", CurrentPageNumber: 1 },
                { id: "idPaginationPrev", value: -1, displayString: "<<", CurrentPageNumber: 1 },
                { id: "idPaginationOne", value: 1, displayString: "1", CurrentPageNumber: 1 },
                { id: "idPaginationTwo", value: 2, displayString: "2", CurrentPageNumber: 1 },
                { id: "idPaginationThree", value: 3, displayString: "3", CurrentPageNumber: 1 },
                { id: "idPaginationMiddle", value: -3, displayString: "...", CurrentPageNumber: -1 },
                { id: "idPaginationFour", value: 4, displayString: "4", CurrentPageNumber: 1 },
                { id: "idPaginationFive", value: 5, displayString: "5", CurrentPageNumber: 1 },
                { id: "idPaginationSix", value: 6, displayString: "6", CurrentPageNumber: 1 },
                { id: "idPaginationNext", value: -4, displayString: ">>", CurrentPageNumber: 1 },
                { id: "idPaginationEnd", value: -5, displayString: ">>|", CurrentPageNumber: 1 }
            ];

            var _previousResultData = '';
            var _totalSize = 0;
            var _currentSelectedPage = 1;
            var _itemsPerPage = 10; // starting position
            var _totalNumberOfPages = 0;
            var _idOfCurrentActivePaginationElement = 'idPaginationOne'; //starting bit
            var _basePageIndex = 1; // Page being displayed by the button at position 1
            var _CutOfForNavigationItems = 6;

            function resetPaginationData() {
                $('#divPagination').empty();
                _totalSize = 0;
                _currentSelectedPage = -1;
                _itemsPerPage = parseInt($('#cmbItemsPerPage option:selected').val(), 10);
                _idOfCurrentActivePaginationElement = 'idPaginationOne';
                $('#lblRowText').html("");
            }

            function getTotalNumberOfPages() {
                var varNumberOfEntries = Math.floor(_totalSize / _itemsPerPage);
                if ((_totalSize > _itemsPerPage) && (_totalSize % _itemsPerPage > 0)) varNumberOfEntries += 1;
                return varNumberOfEntries;
            }

            function generatePaginationDisplay() {
                _totalNumberOfPages = getTotalNumberOfPages();
                // initially everything is switched off
                var displayControllerArray = [];
                for (var i = 0; i < _paginationConstants.length; i++) {
                    displayControllerArray.push(0);
                }

                boolInvokeDraw = true;

                document.getElementById("divPagination").setAttribute("class", "pagination");
                switch (_totalNumberOfPages) {
                    case 0:
                        document.getElementById("divPagination").setAttribute("class", "");
                        boolInvokeDraw = false; 
                        break;
                    case 1:
                        displayControllerArray[2] = 1;
                        break;
                    case 2:
                        displayControllerArray[2] = displayControllerArray[3] = 1;
                        break;
                    case 3:
                        displayControllerArray[2] = displayControllerArray[3] = displayControllerArray[4] = 1;
                        break;
                    case 4:
                        displayControllerArray[2] = displayControllerArray[3] = 1;
                        displayControllerArray[4] = displayControllerArray[6] = 1;
                        break;
                    case 5:
                        displayControllerArray[2] = displayControllerArray[3] = 1;
                        displayControllerArray[4] = displayControllerArray[6] = 1;
                        displayControllerArray[7] = 1;
                        break;
                    case 6:
                        displayControllerArray[2] = displayControllerArray[3] = 1;
                        displayControllerArray[4] = displayControllerArray[6] = 1;
                        displayControllerArray[7] = displayControllerArray[8] = 1;
                        break;
                    default:
                        // assuming > 6
                        for (var i = 0; i < _paginationConstants.length; i++) {
                            displayControllerArray[i] = 1;
                        }
                        break;
                }

                if (boolInvokeDraw) {
                    // we are showing some part of pagination. 
                    drawPaginationLayout(displayControllerArray);
                }
            }

            function drawPaginationLayout(displayControllerArray) {
                $('#divPagination').empty();

                paginationTags = [];
                var i = 0;

                _paginationConstants.forEach(function (element) {
                    if (displayControllerArray[i]) {
                        if (element.CurrentPageNumber != 1) {
                            var aTag = '<input size="1" id="';
                            aTag += element.id;
                            aTag += '"/>'
                            
                            paginationTags.push(aTag);
                        }
                        else {

                            var aTag = '<a href="#" onclick="handlerPaginationClick(';
                            aTag += element.value;
                            aTag += ')"';
                            aTag += ' CurrentPageNumber=';
                            aTag += getCurrentElementNumber(element.id);
                            aTag += '';
                            aTag += ' id="'
                            aTag += element.id;
                            aTag += '">'
                            aTag += element.displayString;
                            aTag += '</a>';
                            
                            paginationTags.push(aTag);
                        }
                    }
                    i++;
                });
                $('#divPagination').append(paginationTags.join(''));

                // resize the input element. 


                //if (_totalNumberOfPages > _CutOfForNavigationItems) {
                //    var idOfElement = getIdOfClickedNavigationButton(_currentSelectedPage);
                //    if (idOfElement) {
                //        document.getElementById(idOfElement).setAttribute("class", "active");
                //    }
                //    //document.getElementById('idPaginationMiddle').setAttribute("onclick", "return false");
                //}

                if (_idOfCurrentActivePaginationElement) {
                    var element = document.getElementById(_idOfCurrentActivePaginationElement);
                    if (element) {
                        element.setAttribute("class", "active");
                    }
                }
                // update the CurrentPageNumber of all the pagination items
            }

            function getCurrentElementNumber(elementId) {
                var rv = _basePageIndex;
                switch (elementId) {
                    case "idPaginationOne":
                        rv = _basePageIndex;
                        break;
                    case "idPaginationTwo":
                        rv = _basePageIndex + 1;
                        break;
                    case "idPaginationThree":
                        rv = _basePageIndex + 2;
                        break;
                    case "idPaginationFour":
                        rv = _basePageIndex + 3;
                        break;
                    case "idPaginationFive":
                        rv = _basePageIndex + 4;
                        break;
                    case "idPaginationSix":
                        rv = _basePageIndex + 5;
                        break;
                    default:
                        rv = -1;
                }
                return rv;
            }

            function refreshMainPage() {
                $('#dynamicTable').empty();
                var startIndex = (_currentSelectedPage - 1) * _itemsPerPage;
                var endIndex = startIndex + _itemsPerPage * 1;
                if (endIndex > _totalSize) endIndex = _totalSize;

                for (var i = startIndex; i < endIndex; i++) {
                    resultElement = _previousResultData[i];
                    var output = [];
                    populateDefaultOutput(output);
                    var experimentName = resultElement["ExperimentName"];

                    output[2] = experimentName; // Populate the Experiment Value
                    var DetectionResult = resultElement["DetectionResult"];
                    if (DetectionResult && DetectionResult.length > 0) {

                        var user = 0;
                        var openCV = 0;
                        var yolo = 0;
                        var mobile = 0;
                        var azure = 0;
                        var google = 0;

                        DetectionResult.forEach(function (detectionResultElement) {
                            var DetectorName = detectionResultElement["DetectorName"];
                            nListLength = 0;
                            var Images = detectionResultElement["Images"];
                            if (Images) {
                                nListLength = Images.length;
                            }

                            switch (DetectorName) {
                                case "openCVDetector":
                                    openCV = nListLength;
                                    break;
                                case "userDetection":
                                    user = nListLength;
                                    break;
                                case "yoloDetection":
                                    yolo = nListLength;
                                    break;
                                case "mobileDetection":
                                    mobile = nListLength;
                                    break;
                                case "azureDetection":
                                    azure = nListLength;
                                    break;
                                case "googleDetection":
                                    google = nListLength;
                                    break;
                            }
                        });
                    }
                    AnalyseResults(user, openCV, yolo, mobile, azure, google, output);
                    output.push('</tr>');
                    $('#dynamicTable').append(output.join(''));
                }
            }

            function populateDefaultOutput(output) {
                output.push('<tr>');
                output.push('<th class="bg-primary" align="middle">', '{experimentName}', '</th>');
                output.push('<td class="bg-info" align="middle">', '0', '</td>');  // openCV [5]
                output.push('<td class="bg-light" align="middle">', '0', '</td>');  // True - user [8]
                output.push('<td class="bg-light"  align="middle">', '0', '</td>');  // yolo [11]
                output.push('<td class="bg-light" align="middle">', '0', '</td>');  // mobile [14]
                output.push('<td class="bg-light" align="middle">', '0', '</td>');  // azure [17]
                output.push('<td class="bg-light" align="middle">', '0', '</td>');  // Google [20]
                //output.push('<td class="bg-light" align="middle">', '0', '</td>');  // Analysis [23]
                output.push('</tr>');
            }

            function gotoParticularPageIndex(pageIndex) {
                
                var valuePassed = parseInt(pageIndex);
                if (Number.isInteger(valuePassed))
                {
                    if (valuePassed <= _totalNumberOfPages && valuePassed >= 1) {
                        
                        _currentSelectedPage = valuePassed;
                        if (_currentSelectedPage + _CutOfForNavigationItems - 1 <= _totalNumberOfPages) {
                            _basePageIndex = _currentSelectedPage;
                            
                        }
                        else {
                            _basePageIndex = _totalNumberOfPages - _CutOfForNavigationItems + 1;
                        }
                        
                        $('#lblRowText').html("");
                        refreshMainPage();
                        updatePaginationDisplayAndInternalAttribute();
                    }
                 }
            }

            function handlerPaginationClick(valuePassed) {
                $('#lblRowText').html("");
                moveCurrentSelectedPage(valuePassed);
                refreshMainPage();
                updatePaginationDisplayAndInternalAttribute();
            }

            function moveCurrentSelectedPage(valuePassed) {
                // valuePassed is the _paginationConstants value
               
                switch (valuePassed) {
                    case -1: //prev
                        // need to shift everything by one.
                        moveRight(1);
                        break;
                    case -2: // start
                        _basePageIndex = _currentSelectedPage = 1;
                        break;
                    case -3: // ...
                        break;
                    case -4: // next
                        moveLeft(1);
                        break;
                    case -5: // End
                        _currentSelectedPage = _totalNumberOfPages;
                        _basePageIndex = _currentSelectedPage - _CutOfForNavigationItems+1;
                        break;
                    default:
                        var idOfElement = getIdOfClickedNavigationButton(valuePassed);
                        if (idOfElement) {
                            var vpElement = document.getElementById(idOfElement).getAttribute("CurrentPageNumber");
                            if (vpElement > 0) {
                                _currentSelectedPage = parseInt(vpElement, 10);
                            }
                        }
                        break;
                }
                // update the display numbers of all pagination items
            }

            function moveLeft(noOfSteps) {
                // as if >> button is pressed
                var brv = false;
                if (_basePageIndex + _CutOfForNavigationItems - 1 + noOfSteps <= _totalNumberOfPages) {
                    _basePageIndex += noOfSteps;
                }
                if (_currentSelectedPage + noOfSteps <= _totalNumberOfPages) { _currentSelectedPage += noOfSteps; brv = true; }
                return brv; 
            }

            function moveRight(noOfSteps) {
                var rv = false; 
                if (_basePageIndex >= 1 + noOfSteps) _basePageIndex -= noOfSteps;
                if (_currentSelectedPage >= 1 + noOfSteps) {
                    _currentSelectedPage -= noOfSteps; rv = true;
                }
                return rv
            }

            var listofPaginationButtons = [{ id: 'idPaginationOne' }, { id: 'idPaginationTwo' }, { id: 'idPaginationThree' },
            { id: 'idPaginationFour' }, { id: 'idPaginationFive' }, { id: 'idPaginationSix' }];

            function updatePaginationDisplayAndInternalAttribute() {
                if (_totalNumberOfPages > _CutOfForNavigationItems) {
                    var index = 0;
                    listofPaginationButtons.forEach(function (element) {
                        document.getElementById(element.id).innerHTML = _basePageIndex + index;
                        document.getElementById(element.id).setAttribute("CurrentPageNumber", _basePageIndex + index);
                        if (_basePageIndex + index == _currentSelectedPage) {
                            document.getElementById(_idOfCurrentActivePaginationElement).setAttribute("class", "");
                            document.getElementById(element.id).setAttribute("class", "active");
                            _idOfCurrentActivePaginationElement = element.id;

                            $('#lblRowText').html("Row " + _currentSelectedPage + " of " + _totalNumberOfPages);
                        }
                        index++;
                    });
                }
                else {
                        listofPaginationButtons.forEach(function (element) {
                        var element = document.getElementById(element.id);
                        if (element) { 
                            var vpElement = element.getAttribute("CurrentPageNumber");

                            if (vpElement) {
                                vpElement = parseInt(vpElement, 10); 
                                if (vpElement > 0) {
                                    if (parseInt(vpElement) == _currentSelectedPage) {
                                        document.getElementById(_idOfCurrentActivePaginationElement).setAttribute("class", "");
                                        document.getElementById(element.id).setAttribute("class", "active");
                                        _idOfCurrentActivePaginationElement = element.id;
                                        $('#lblRowText').html("Row " + _currentSelectedPage + " of " + _totalNumberOfPages);
                                    }
                                }
                            }
                        }

                    });
                }
            }

            function getIdOfClickedNavigationButton(valuePassed) {
                var idPassed = ''
                for (var i = 0, l = _paginationConstants.length; i < l;) {
                    if (_paginationConstants[i].value == valuePassed) {
                        idPassed = _paginationConstants[i].id;
                        break;
                    }
                    else i++;
                }
                return idPassed;
            }

            function AnalyseResults(user, openCV, yolo, mobile, azure, google, output) {

                var listItems = [
                    { id: 'user', value: user, index: 5 },
                    { id: 'openCV', value: openCV, index: 8 },
                    { id: 'yolo', value: yolo, index: 11 },
                    { id: 'mobile', value: mobile, index: 14 },
                    { id: 'azure', value: azure, index: 17 },
                    { id: 'google', value: google, index: 20 }
                ];



                listItems.forEach(function (element) {
                    output[element.index] = element.value;
                });

                // for opencv, 65, 35,
                if (openCV && openCV > 0) {
                    user / openCV > .65 ? plugSuccess(7, output) : ((user / openCV) > .35) ? plugWarning(7, output) : plugDanger(7, output);
                }


                if (user && user > 0) {
                    for (var i = 2; i < listItems.length; i++) {
                        listItems[i].value / user > .65 ? plugSuccess(listItems[i].index - 1, output) : listItems[i].value / user > .35 ? plugWarning(listItems[i].index - 1, output) : plugDanger(listItems[i].index - 1, output)
                    }
                }
                else {
                    if (user == 0) {
                        for (var i = 2; i < listItems.length; i++) {
                            listItems[i].value == 0 ? plugSuccess(listItems[i].index - 1, output) : listItems[i].value > 3 ? plugWarning(listItems[i].index - 1, output) : plugDanger(listItems[i].index - 1, output)
                        }
                    }
                }
            }

            function plugSuccess(index, output) {
                output[index] = '<td class="bg-success" align="middle">';
            }

            function plugWarning(index, output) {
                output[index] = '<td class="bg-warning" align="middle">';
            }

            function plugDanger(index, output) {
                output[index] = '<td class="bg-danger" align="middle">';
            }

        </script>
    }
