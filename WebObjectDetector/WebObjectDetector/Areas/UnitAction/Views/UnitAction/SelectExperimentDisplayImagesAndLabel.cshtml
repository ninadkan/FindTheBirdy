
@{
    ViewData["Title"] = "SelectExperimentDisplayImagesAndLabel";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="row">
    <div class="col-md-6">
        <h4>Select Experiment, Display Images And Label</h4>
    </div>
    <div class="col-md-3">
        <label id="lblRowText"></label>
    </div>
    <div class="col-md-3">
        <label class="control-label vcenter">Show: </label>
        <select class="control-label vcenter" name="cmbItemsPerPage" id="cmbItemsPerPage">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="2">4</option>
            <option value="3">9</option>
            <option value="4" selected="selected">16</option>
            <option value="5">25</option>
            <option value="6">36</option>
            <option value="7">49</option>
            <option value="8">64</option>
            <option value="9">81</option>
            <option value="10">100</option>
        </select>
        <label class="control-label vcenter">items per page</label>
    </div>
</div>


<hr />


<div class="row">
    <div class="col-md-1">
        <label class="control-label"> </label>
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Azure File Share :</label>
    </div>
    <div class="col-md-2">
        <input class="form-control btn-block" id="txtAzureFileShareAccount" value="nkdsvm" />
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">SAS Key :</label>
    </div>
    <div class="col-md-2">
        <input class="form-control btn-block" id="txtSAS" type="password" value='?sv=2018-03-28&ss=f&srt=sco&sp=rl&se=2019-01-31T01:37:17Z&st=2019-01-11T17:37:17Z&spr=https&sig=bAKDPGhCD573RUdkzyaspOVOu8I4ciEWV0xuMX3mnLY%3D' />
    </div>
</div>


<div class="row">
    <div class="col-md-1">
        <label class="control-label"> </label>
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Destination Share :</label>
    </div>
    <div class="col-md-2">
        <input class="form-control btn-block" id="txtDestinationShare" value="experiment-data" />
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Destination Directory :</label>
    </div>
    <div class="col-md-2">
        <input class="form-control btn-block" id="txtDestinationDirectory" value="object-detection" />
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Use source directory:</label>
    </div>
    <div class="col-md-1 ">
         <input class="form-control" type="checkbox" id="chkSourceDirectory" />
    </div>
</div>


<div class="row ">
    <div class="col-md-1">
        <label class="control-label"> </label>
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Experiment Name :</label>
    </div>
    <div class="col-md-2">
        <select id="ExperimentCollection" class="form-control"></select>
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Output Folder :</label>
    </div>
    <div class="col-md-2">
        <input class="form-control btn-block" id="txtOutputFolder" value="output" />
    </div>
</div>


@*<div class="row">
        <div class="col-md-1">
            <label class="control-label"> </label>
        </div>
        <div class="col-md-2 text-right ">
            <label class="control-label vcenter">Cosmos DB Name:</label>
        </div>
        <div class="col-md-2">
            <input class="form-control btn-block" id="txtDbExperimentName" value="experiment-find-the-birdy" disabled />
        </div>
        <div class="col-md-2 text-right ">
            <label class="control-label vcenter">Document Id :</label>
        </div>
        <div class="col-md-2">
            <input class="form-control btn-block" id="txtDocumentId" value="userDetector" disabled />
        </div>
    </div>*@

<div class="row">
    <div class="col-md-1">
        <label class="control-label"> </label>
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Operations:</label>
    </div>
    <div class="col-md-2">
        <button id="btnLoadExperiments" class="btn btn-primary" onclick="btnLoadExperimentsHandler(this)">Load Experiments</button>
    </div>
    <div class="col-md-2">
        <button id="btnLoadTag" class="btn btn-primary" onclick="btnLoadTagHandler(this)" disabled>Load Tags</button>
    </div>
    <div class="col-md-2">
        <button id="btnSaveTag" class="btn btn-primary" onclick="btnSaveTagHandler(this)">Save Tags</button>
    </div>
</div>

<div class="row form-group">
    <div class="col-md-1">
        <label class="control-label"> </label>
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Operation Result  :</label>
    </div>
    <div class="col-md-6">
        <label class="form-control btn-block" id="lblResult"></label>
    </div>
</div>

<div id="dynamicImages">
    @*<div class="row">
            <div class="col-md-2 nopad text-center">
                <label class="image-checkbox" id="1">
                    <img class="img-responsive img-thumbnail" src="https://dummyimage.com/600x400/000/fff">
                    <input type="checkbox" value="" />
                    <i class="fa fa-check hidden"></i>
                </label>
            </div>
            <div class="col-md-2 nopad text-center">
                <label class="image-checkbox" id="2">
                    <img class="img-responsive" src="https://dummyimage.com/600x400/000/fff" />
                    <input type="checkbox" value="" />
                    <i class="fa fa-check hidden"></i>
                </label>
            </div>
            <div class="col-md-2 nopad text-center">
                <label class="image-checkbox" id="3">
                    <img class="img-responsive" src="https://dummyimage.com/600x400/000/fff" />
                    <input type="checkbox" value="" />
                    <i class="fa fa-check hidden"></i>
                </label>
            </div>
            <div class="col-md-2 nopad text-center">
                <label class="image-checkbox" id="4">
                    <img class="img-responsive" src="https://dummyimage.com/600x400/000/fff" />
                    <input type="checkbox" value="" />
                    <i class="fa fa-check hidden"></i>
                </label>
            </div>
            <div class="col-md-2 nopad text-center">
                <label class="image-checkbox" id="5">
                    <img class="img-responsive" src="https://dummyimage.com/600x400/000/fff" />
                    <input type="checkbox" value="" />
                    <i class="fa fa-check hidden"></i>
                </label>
            </div>
        </div>*@
</div>


<div class="center">
    <div id="divPagination">
    </div>
</div>



@section Scripts {
    <script>

        /* ================== Push - Pull Functionality ================== */

        var _lastButton = [];
        var _lastButtonClass = [];
        var _dataDirty = false;

        function pushElement(elementID) {
            var element = document.getElementById(elementID);
            if (element) {
                _lastButton.push(element);
                _lastButtonClass.push(element.getAttribute("class"));
                element.setAttribute("class", "btn btn-default");
                $("body").css("cursor", "progress");
            }
        }

        function popElement() {
            var element = _lastButton.pop();
            var elementClass = _lastButtonClass.pop();
            if (element) {
                element.setAttribute("class", elementClass);
            }
            $("body").css("cursor", "default");
        }

        /* ================== Push - Pull Functionality ================== */
        /* ================== Tag - unTag Functionality ================== */
        // image gallery
        // init the state from the input
        function initImages() {
            $(".image-checkbox").each(function () {
                if ($(this).find('input[type="checkbox"]').first().attr("checked")) {
                    $(this).addClass('image-checkbox-checked');
                }
                else {
                    $(this).removeClass('image-checkbox-checked');
                }
            });
            _dataDirty = false;
        }

        // Amazing way to resolve dynamic event mapping.
        // courtesy: https://jqueryhouse.com/jquery-on-method-the-issue-of-dynamically-added-elements/
        $('div#dynamicImages').on("click", "label", function (e) {
            $(this).toggleClass('image-checkbox-checked');
            //console.log($(this).attr('id'));

            var $checkbox = $(this).find('input[type="checkbox"]');
            $checkbox.prop("checked", !$checkbox.prop("checked"));
            _dataDirty = true;
            e.preventDefault();
        });

        //// sync the state to the input
        //$(".image-checkbox").on("click", function (e) {
        //    $(this).toggleClass('image-checkbox-checked');
        //    var $checkbox = $(this).find('input[type="checkbox"]');
        //    $checkbox.prop("checked", !$checkbox.prop("checked"))
        //    e.preventDefault();
        //});

        //function btnClickImageHandler(obj) {
        //    $('#3').toggleClass('image-checkbox-checked');
        //    var $checkbox = $('#3').find('input[type="checkbox"]');
        //    $checkbox.prop("checked", !$checkbox.prop("checked"))
        //}

        /* ================== Tag - unTag Functionality ================== */
        /* ================== Ready and Click Handlers  ================== */
        $(function () // called when the body is ready
        {
            console.log("Ready");
            initImages();
            $('#ExperimentCollection').on('change', onExperimentCollChanged);

            $('#chkSourceDirectory').change(function () {
                if ($(this).is(":checked")) {
                    $("#txtOutputFolder").prop('disabled', true);
                }
                else {
                    $("#txtOutputFolder").prop('disabled', false);
                }
            });


            /* Pagination stuff */
            _itemsPerPage = parseInt($('#cmbItemsPerPage option:selected').val(), 10);
            $('#cmbItemsPerPage').on('change', oncmbItemsPerPageChanged);

            $(document).keyup(function (e) {
                if ($('#idPaginationMiddle')) {
                    if ($('#idPaginationMiddle').is(":focus") && e.key == "Enter") {
                        gotoParticularPageIndex(document.getElementById('idPaginationMiddle').value);
                    }
                }
            });
            /* Pagination stuff */
        });

        function btnLoadExperimentsHandler(obj) {
            // disable the checkBox as otherwise it'll just complicate the issue
            // one can load from output folder and can try and save the tag under main folder label. 
            $("#chkSourceDirectory").prop('disabled', true);
            getExperimentNames();
        }

        var _bSaveInvokedBecauseDataDirty = false;
        function onExperimentCollChanged() {
            if (_dataDirty) {
                // challenge is that the before save does first handshake, code carries on executing  and
                // Load of next item is called.
                _bSaveInvokedBecauseDataDirty = true;
                btnSaveTagHandler(document.getElementById('btnLoadTag'));
            }
            else {
                loadNextComboBoxValue();
            }
        }

        function loadNextComboBoxValue() {
            var comboBox = document.getElementById("ExperimentCollection");
            _currentExperimentName = comboBox.options[comboBox.selectedIndex].text.trim();

            if (_currentExperimentName != null || _currentExperimentName.length > 0) {
                btnLoadTagHandler(document.getElementById('btnLoadTag'));
            }
        }

        function btnLoadTagHandler(obj) {
            loadTagValues(obj);
        }

        function btnSaveTagHandler(obj) {
            SaveTagHandler(obj);
        }
        /* ====================== Ready and Click Handlers  ======================== */
        /* ====================== Pagination handler  ============================== */

        var _itemsPerPage = 16; 
        var _totalSize = 0;
        var _currentSelectedPage = 1;
        var _totalNumberOfPages = 0;
        var _idOfCurrentActivePaginationElement = 'idPaginationOne'; //starting bit
        var _basePageIndex = 1; // Page being displayed by the button at position 1
        var _CutOfForNavigationItems = 6;


        function oncmbItemsPerPageChanged() {
            _itemsPerPage = parseInt($('#cmbItemsPerPage option:selected').val(), 10);
            getExperimentNames(); 
        }

        var _paginationConstants = [
            { id: "idPaginationStart", value: -2, displayString: "|<<", CurrentPageNumber: 1 },
            { id: "idPaginationPrev", value: -1, displayString: "<<", CurrentPageNumber: 1 },
            { id: "idPaginationOne", value: 1, displayString: "1", CurrentPageNumber: 1 },
            { id: "idPaginationTwo", value: 2, displayString: "2", CurrentPageNumber: 1 },
            { id: "idPaginationThree", value: 3, displayString: "3", CurrentPageNumber: 1 },
            { id: "idPaginationMiddle", value: -3, displayString: "...", CurrentPageNumber: -1 },
            { id: "idPaginationFour", value: 4, displayString: "4", CurrentPageNumber: 1 },
            { id: "idPaginationFive", value: 5, displayString: "5", CurrentPageNumber: 1 },
            { id: "idPaginationSix", value: 6, displayString: "6", CurrentPageNumber: 1 },
            { id: "idPaginationNext", value: -4, displayString: ">>", CurrentPageNumber: 1 },
            { id: "idPaginationEnd", value: -5, displayString: ">>|", CurrentPageNumber: 1 }
        ];

        function resetPaginationData() {
            $('#divPagination').empty();
            _totalSize = 0;
            _currentSelectedPage = -1;
            _itemsPerPage = parseInt($('#cmbItemsPerPage option:selected').text(), 10);
            _idOfCurrentActivePaginationElement = 'idPaginationOne';
            $('#lblRowText').html("");
        }

        function getTotalNumberOfPages() {
            return Math.floor(_totalSize / _itemsPerPage) + (_totalSize % _itemsPerPage ? 1 : 0);
        }

        function generatePaginationDisplay() {
            _totalNumberOfPages = getTotalNumberOfPages();
            // initially everything is switched off
            // Dollowing array acts as flag to indicate which buttons to display and whcih not to 
            // if set to 1, that control is displayed, otherwise no
            var displayControllerArray = [];
            for (var i = 0; i < _paginationConstants.length; i++) {
                displayControllerArray.push(0);
            }

            // pagination construct is needed only for certain cases when number of pages > 5
            boolInvokeDraw = true;

            document.getElementById("divPagination").setAttribute("class", "pagination");
            switch (_totalNumberOfPages) {
                case 0:
                    document.getElementById("divPagination").setAttribute("class", "");
                    boolInvokeDraw = false; // pagination is not displayd in this case, this is done by resetting class info
                    break;
                case 1:
                    displayControllerArray[2] = 1; // 1
                    break;
                case 2:
                    displayControllerArray[2] = displayControllerArray[3] = 1; // 1,2
                    break;
                case 3:
                    displayControllerArray[2] = displayControllerArray[3] = displayControllerArray[4] = 1; // 1,2,3
                    break;
                case 4:
                    displayControllerArray[2] = displayControllerArray[3] = 1; // 1,2,3,4
                    displayControllerArray[4] = displayControllerArray[6] = 1;
                    break;
                case 5:
                    displayControllerArray[2] = displayControllerArray[3] = 1; // 1,2,3,4,5
                    displayControllerArray[4] = displayControllerArray[6] = 1;
                    displayControllerArray[7] = 1;
                    break;
                case 6:
                    displayControllerArray[2] = displayControllerArray[3] = 1; // 1,2,3,4,5,6
                    displayControllerArray[4] = displayControllerArray[6] = 1;
                    displayControllerArray[7] = displayControllerArray[8] = 1;
                    break;
                default:
                    // assuming > 6
                    for (var i = 0; i < _paginationConstants.length; i++) {
                        displayControllerArray[i] = 1; // |<, <<, 1,2,3,__, 4,5,6 >, >>!
                    }
                    break;
            }

            if (boolInvokeDraw) {
                // we are showing some part of pagination. 
                drawPaginationLayout(displayControllerArray);
            }
        }

        // dynamically construct the pagination buttons. 
        function drawPaginationLayout(displayControllerArray) {
            $('#divPagination').empty();

            paginationTags = [];
            var i = 0;

            _paginationConstants.forEach(function (element) {
                if (displayControllerArray[i]) {
                    if (element.CurrentPageNumber != 1) {
                        var aTag = '<input size="1" id="';
                        aTag += element.id;
                        aTag += '"/>'

                        paginationTags.push(aTag);
                    }
                    else {
                            var aTag = '<a href="#" onclick="handlerPaginationClick(';
                            aTag += element.value;
                            aTag += ')"';
                            aTag += ' CurrentPageNumber=';
                            aTag += getCurrentElementNumber(element.id);
                            aTag += '';
                            aTag += ' id="'
                            aTag += element.id;
                            aTag += '">'
                            aTag += element.displayString;
                            aTag += '</a>';

                            paginationTags.push(aTag);
                    }
                }
                i++;
            });
            $('#divPagination').append(paginationTags.join(''));

            // resize the input element. 


            //if (_totalNumberOfPages > _CutOfForNavigationItems) {
            //    var idOfElement = getIdOfClickedNavigationButton(_currentSelectedPage);
            //    if (idOfElement) {
            //        document.getElementById(idOfElement).setAttribute("class", "active");
            //    }
            //    //document.getElementById('idPaginationMiddle').setAttribute("onclick", "return false");
            //}

            if (_idOfCurrentActivePaginationElement) {
                var element = document.getElementById(_idOfCurrentActivePaginationElement);
                if (element) {
                    element.setAttribute("class", "active");
                }
            }
            // update the CurrentPageNumber of all the pagination items
        }

        function getCurrentElementNumber(elementId) {
            var rv = _basePageIndex;
            switch (elementId) {
                case "idPaginationOne":
                    rv = _basePageIndex;
                    break;
                case "idPaginationTwo":
                    rv = _basePageIndex + 1;
                    break;
                case "idPaginationThree":
                    rv = _basePageIndex + 2;
                    break;
                case "idPaginationFour":
                    rv = _basePageIndex + 3;
                    break;
                case "idPaginationFive":
                    rv = _basePageIndex + 4;
                    break;
                case "idPaginationSix":
                    rv = _basePageIndex + 5;
                    break;
                default:
                    rv = -1;
            }
            return rv;
        }

        function gotoParticularPageIndex(pageIndex) {
            var valuePassed = parseInt(pageIndex);
            if (Number.isInteger(valuePassed)) {
                if (valuePassed <= _totalNumberOfPages && valuePassed >= 1) {

                    _currentSelectedPage = valuePassed;
                    if (_currentSelectedPage + _CutOfForNavigationItems - 1 <= _totalNumberOfPages) {
                        _basePageIndex = _currentSelectedPage;

                    }
                    else {
                        _basePageIndex = _totalNumberOfPages - _CutOfForNavigationItems + 1;
                    }

                    $('#lblRowText').html("");
                    refreshMainPage();
                    updatePaginationDisplayAndInternalAttribute();
                }
            }
        }

        function handlerPaginationClick(valuePassed) {
            $('#lblRowText').html("");
            moveCurrentSelectedPage(valuePassed);
            refreshMainPage();
            updatePaginationDisplayAndInternalAttribute();
        }

        function moveCurrentSelectedPage(valuePassed) {
            // valuePassed is the _paginationConstants value

            switch (valuePassed) {
                case -1: //prev
                    // need to shift everything by one.
                    moveRight(1);
                    break;
                case -2: // start
                    _basePageIndex = _currentSelectedPage = 1;
                    break;
                case -3: // ...
                    break;
                case -4: // next
                    moveLeft(1);
                    break;
                case -5: // End
                    _currentSelectedPage = _totalNumberOfPages;
                    _basePageIndex = _currentSelectedPage - _CutOfForNavigationItems + 1;
                    break;
                default:
                    var idOfElement = getIdOfClickedNavigationButton(valuePassed);
                    if (idOfElement) {
                        var vpElement = document.getElementById(idOfElement).getAttribute("CurrentPageNumber");
                        if (vpElement > 0) {
                            _currentSelectedPage = parseInt(vpElement, 10);
                        }
                    }
                    break;
            }
            // update the display numbers of all pagination items
        }

        function moveLeft(noOfSteps) {
            // as if >> button is pressed
            var brv = false;
            if (_basePageIndex + _CutOfForNavigationItems - 1 + noOfSteps <= _totalNumberOfPages) {
                _basePageIndex += noOfSteps;
            }
            if (_currentSelectedPage + noOfSteps <= _totalNumberOfPages) { _currentSelectedPage += noOfSteps; brv = true; }
            return brv;
        }

        function moveRight(noOfSteps) {
            var rv = false;
            if (_basePageIndex >= 1 + noOfSteps) _basePageIndex -= noOfSteps;
            if (_currentSelectedPage >= 1 + noOfSteps) {
                _currentSelectedPage -= noOfSteps; rv = true;
            }
            return rv
        }

        var listofPaginationButtons = [{ id: 'idPaginationOne' }, { id: 'idPaginationTwo' }, { id: 'idPaginationThree' },
        { id: 'idPaginationFour' }, { id: 'idPaginationFive' }, { id: 'idPaginationSix' }];

        function updatePaginationDisplayAndInternalAttribute() {
            if (_totalNumberOfPages > _CutOfForNavigationItems) {
                var index = 0;
                listofPaginationButtons.forEach(function (element) {
                    document.getElementById(element.id).innerHTML = _basePageIndex + index;
                    document.getElementById(element.id).setAttribute("CurrentPageNumber", _basePageIndex + index);
                    if (_basePageIndex + index == _currentSelectedPage) {
                        document.getElementById(_idOfCurrentActivePaginationElement).setAttribute("class", "");
                        document.getElementById(element.id).setAttribute("class", "active");
                        _idOfCurrentActivePaginationElement = element.id;
                        $('#lblRowText').html("Row " + _currentSelectedPage + " of " + _totalNumberOfPages);
                    }
                    index++;
                });
            }
            else {
                listofPaginationButtons.forEach(function (element) {
                    var element = document.getElementById(element.id);
                    if (element) {
                        var vpElement = element.getAttribute("CurrentPageNumber");

                        if (vpElement) {
                            vpElement = parseInt(vpElement, 10);
                            if (vpElement > 0) {
                                if (parseInt(vpElement) == _currentSelectedPage) {
                                    document.getElementById(_idOfCurrentActivePaginationElement).setAttribute("class", "");
                                    document.getElementById(element.id).setAttribute("class", "active");
                                    _idOfCurrentActivePaginationElement = element.id;
                                    $('#lblRowText').html("Row " + _currentSelectedPage + " of " + _totalNumberOfPages);
                                }
                            }
                        }
                    }
                });
            }
        }

        function getIdOfClickedNavigationButton(valuePassed) {
            var idPassed = ''
            for (var i = 0, l = _paginationConstants.length; i < l;) {
                if (_paginationConstants[i].value == valuePassed) {
                    idPassed = _paginationConstants[i].id;
                    break;
                }
                else i++;
            }
            return idPassed;
        }
        /* ====================== Pagination handler  ============================== */
        /* ====================== Loading Tag Values  ============================== */
        var _ID_FOR_USER_DETECTION = 'userDetection';
        var _ID_FOR_MAIN_IMAGE_TAGGING = 'userMainImageDetection'; 
        var _imageLabelTag = [];


        function loadTagValues(obj) {
            // lets first load all the images relavant to the current experiment + output folder.
            // Two variables, _outputImageFiles and _imageLabelTag are populated after successful invocation of this function.
            if (!getImageFileNames()) {
                return false;
            }

            _imageLabelTag = [];


         
            if (!document.getElementById('chkSourceDirectory').checked) {
                _outputFolder = $('#txtOutputFolder').val();
                if (_outputFolder == null || _outputFolder.trim().length < 1) {
                    alert('Please enter a valid output folder name!');
                    return false;
                }
            }

            var dataVal = {
                ImageDetectionProvider: _ID_FOR_USER_DETECTION,
                ExperimentName: _currentExperimentName
            };

            //override if it is something else
            if (document.getElementById('chkSourceDirectory').checked) {
                dataVal = {
                    ImageDetectionProvider: _ID_FOR_MAIN_IMAGE_TAGGING,
                    ExperimentName: _currentExperimentName
                };
            }
 
            
            var updatedTagJson = JSON.stringify(dataVal);
            console.log(updatedTagJson);
            pushElement(obj.id);
            InvokeWebAPICosmosDb('returnLabelledImageList', updatedTagJson, handlerCosmosDBReturnImageList);
        }

        /* ====================== Loading Tag Values  ============================== */
        /* ====================== Saving  Tag Values  ============================== */
        function SaveTagHandler(obj) {
            //console.log('SaveTagHandler');

            if (!checkExperimentNameParameters())
                return false;


            var objArray = [];

            $(".image-checkbox").each(function () {
                if ($(this).hasClass('image-checkbox-checked')) {
                    var $divElement = $(this).find('div');
                    if ($divElement) {
                        //console.log($divElement.html());
                        var tempObj = { ImageName: $divElement.html(), ConfidenceScore: 1.0 };
                        objArray.push(tempObj)
                    }
                }
            });

            if (objArray.length > 0) {
                var d = new Date();

                var dataVal = {
                    ImageDetectionProvider: _ID_FOR_USER_DETECTION,
                    ExperimentName: _currentExperimentName,
                    DateTime: d.toUTCString(),
                    detectedItems: objArray
                };

                // override
                if (document.getElementById('chkSourceDirectory').checked) {
                    dataVal = {
                        ImageDetectionProvider: _ID_FOR_MAIN_IMAGE_TAGGING,
                        ExperimentName: _currentExperimentName,
                        DateTime: d.toUTCString(),
                        detectedItems: objArray
                    };
                }

                var updatedTagJson = JSON.stringify(dataVal);
                console.log(updatedTagJson);
                pushElement(obj.id);
                InvokeWebAPICosmosDb('saveLabelledImageList', updatedTagJson, handlerCosmosDBSaveImageList);
            }
            else {
                $('#lblResult').html('No Tags Saved as none were found');
            }
        }

        function handlerCosmosDBSaveImageList(evtXHR) {
            if (invocationCosmos.readyState == 4) {
                if (invocationCosmos.status == 200) {
                    if (invocationCosmos.response) {
                        $('#lblResult').html(invocationCosmos.response);
                    }
                }
                else {
                    var AppendedText = "Invocation Errors Occured " + invocationCosmos.readyState + " and the status is " + invocationCosmos.status;
                    $('#lblResult').html(AppendedText);
                }
                popElement();
                if (_bSaveInvokedBecauseDataDirty == true) {
                    _bSaveInvokedBecauseDataDirty = false;
                    loadNextComboBoxValue();
                }
            }
        }

        /* ====================== Saving  Tag Values  ============================== */
        /* ====================== Web API functinality ============================= */
        var invocationCosmos = new XMLHttpRequest();

        function InvokeWebAPICosmosDb(urlAdd, dataval, handler) {
            var url = 'http://localhost:5001/comsosDB/v1.0/' + urlAdd;

            if (invocationCosmos) {
                invocationCosmos.open('POST', url, true);
                invocationCosmos.setRequestHeader('Content-Type', 'application/json');
                invocationCosmos.onreadystatechange = handler;
                invocationCosmos.send(dataval);
            }
            else {
                var errorMsg = "No Invocation TookPlace At All";
                $('#lblResult').html(errorMsg);
            }
        }

        function handlerCosmosDBReturnImageList(evtXHR) {
            //console.log('handlerCosmosDBReturnImageList');
            if (invocationCosmos.readyState == 4) {
                if (invocationCosmos.status == 200) {
                    if (invocationCosmos.response) {
                        //$('#lblResult').html(invocationCosmos.response);
                        $('#lblResult').html('Cosmos DB web API ok');
                        loadCurrentLabels(invocationCosmos.response);
                    }
                    else {
                        $('#lblResult').html("Null invocationCosmos.response");
                    }
                }
                else {
                    var AppendedText = "Invocation Errors Occured " + invocationCosmos.readyState + " and the status is " + invocationCosmos.status;
                    $('#lblResult').html(AppendedText);
                }
                popElement();
            }
        }

        function loadCurrentLabels(response) {
            //console.log('loadCurrentLabels');
            _imageLabelTag = [];
            var tp = $.parseJSON(response);
            if (tp) {
                var result = tp["result"];
                if (result) {
                    for (var j = 0; j < result.length; j++) {           // only one item is contained in the array
                        var detectedItems = result[j]["detectedItems"]; // leap of faith
                        if (detectedItems) {
                            for (var i = 0; i < detectedItems.length; i++) {
                                if (detectedItems[i]) {
                                    _imageLabelTag.push(detectedItems[i]["ImageName"]);
                                }
                            }
                        }
                    }
                }
            }
            // Me just thinks this makes a better solution.
            sleep(500).then(() => {
                loadDynamicImageElements();
            });
        }

        function sleep(time) {
            return new Promise((resolve) => setTimeout(resolve, time));
        }

        /* ====================== Web API functinality ============================= */
        /* ====================== Load images ====================================== */

        function loadDynamicImageElements() {
            // at this time,both the list of images and the cosmosDB list is with us
            // the list that is interesting to us is the _outputImageFiles list

            resetPaginationData();
            _totalSize = _outputImageFiles.length;
            _currentSelectedPage = _basePageIndex = 1;
            generatePaginationDisplay();
            refreshMainPage();
        }


        function refreshMainPage() {
            // pass the current paging offset and indexes. 
            var startIndex = (_currentSelectedPage - 1) * _itemsPerPage;
            var endIndex = startIndex + _itemsPerPage * 1;
            if (endIndex > _totalSize) endIndex = _totalSize;

            // Remove everything
            $("#dynamicImages").html("");
            //document.getElementById('dynamicImages').innerHTML = "";
            _innerHtml = [];

            if (_outputImageFiles.length > 0) {
                var currentCount = 0;
                var numberOfImagesPerRow = parseInt($('#cmbItemsPerPage option:selected').val(), 10); 
                var totalNumberOfImagesToBeDisplayed = endIndex - startIndex; 
                var numberOfRowsToBeDisplayed = Math.floor(totalNumberOfImagesToBeDisplayed / numberOfImagesPerRow) + (totalNumberOfImagesToBeDisplayed % numberOfImagesPerRow ? 1 : 0);


                var fileUri = '';

                if (document.getElementById('chkSourceDirectory').checked) {
                    fileUri = 'https://' + _account + '.file.core.windows.net' + "/" + _destinationShare + "/" + _destinationFolder + "/" + _currentExperimentName + "/";
                } else {
                    fileUri = 'https://' + _account + '.file.core.windows.net' + "/" + _destinationShare + "/" + _destinationFolder + "/" + _currentExperimentName + "/" + _outputFolder + "/";
                }

                 

                for (var currentLine = 0; currentLine < numberOfRowsToBeDisplayed; currentLine++) {
                    _innerHtml.push('<div class="row">');
                    for (var index = 0; index < numberOfImagesPerRow;) {
                        if (currentCount < totalNumberOfImagesToBeDisplayed) {
                            var imageFileName = _outputImageFiles[startIndex + currentCount];
                            var imgSrc = fileUri + imageFileName + _sas;
                            console.log(imgSrc);

                            _innerHtml.push('<div class="col-md-');
                            _innerHtml.push(getcolumnWidth(numberOfImagesPerRow));
                            _innerHtml.push(' nopad text-center">');
                            _innerHtml.push('<label class="image-checkbox" id="');
                            _innerHtml.push('imgLabel_' + currentCount.toString());
                            _innerHtml.push('">');
                            //TODO:: height and width should be adjusted depending on the number of items per row. 
                            _innerHtml.push('<img class="img-responsive img-thumbnail" height="200" width="200" src="');
                            _innerHtml.push(imgSrc);
                            _innerHtml.push('">');
                            _innerHtml.push('<div class="bottomleft" id="');
                            _innerHtml.push(imageFileName);
                            _innerHtml.push('">')
                            _innerHtml.push(imageFileName);
                            _innerHtml.push('</div >');

                            if (_imageLabelTag.indexOf(imageFileName) >= 0) {
                                _innerHtml.push('<input type="checkbox" value="" checked />');
                            }
                            else {
                                _innerHtml.push('<input type="checkbox" value="" />');
                            }

                            _innerHtml.push('<i class="fa fa-check hidden"></i>');
                            _innerHtml.push('</label>');
                            _innerHtml.push('</div>');
                            currentCount++;
                            index++;
                        }
                        else {
                            // we are at the last line and don't have all the images to fill
                            break;
                        }
                    }
                    _innerHtml.push('</div>');
                }

                $("#dynamicImages").html(_innerHtml.join(''));
                initImages();
            }
        }

        function getcolumnWidth(numberOfImagesPerRow) {
            var rv = "2";

            switch (numberOfImagesPerRow) {
                case 1:
                    rv = "8";
                    break;
                case 2:
                    rv = "6";
                    break;
                case 3:
                    rv = "4";
                    break;
                case 4:
                    rv = "3";
                    break;
                case 5,6:
                    rv = "2";
                    break;
                case 6:
                    rv = "2"
                    break;
                case 7,8,9,10:
                    rv = "1"
                    break;
                default:
                    rv = "2";
                    break;
            }
            return rv;
        }

        /* ======================= Load images ====================================== */
        /* ======================= Azure File Share Functions ======================= */

        var _account = '';
        var _sas = '';
        var _outputImageFiles = [];
        var _experimentNames = [];
        var _destinationShare = '';
        var _destinationFolder = '';
        var _currentExperimentName = '';
        var _outputFolder = '';
        var _fileExtension = ".jpg";


        function getExperimentNames() {
            var fileService = getFileService();
            if (!fileService)
                return;

            if (!checkExperimentNameParameters())
                return null;

            $("body").css("cursor", "progress");
            fileService.listFilesAndDirectoriesSegmented(_destinationShare, _destinationFolder, null, function (error, results) {
                if (error) {
                    console.log(error);
                    $("body").css("cursor", "default");
                } else {
                    _experimentNames = [];
                    $('#ExperimentCollection').empty();
                    _outputImageFiles = [];
                    if (results.entries.directories.length < 1) {
                        console.log('no directories returned !!! length = 0');
                    }
                    else {

                        for (var i = 0, file; file = results.entries.directories[i]; i++) {
                            _experimentNames.push(file.name);
                            var option = '';
                            option += '<option value="' + file.name + '">' + file.name + '</option>';
                            $('#ExperimentCollection').append(option);
                        }
                        onExperimentCollChanged();
                    }
                }
            });
            $("body").css("cursor", "default");
        }

        function checkExperimentNameParameters() {
            _destinationShare = $('#txtDestinationShare').val();

            if (_destinationShare == null || _destinationShare.trim().length < 1) {
                alert('Please enter a valid storage destination share name!');
                return false;
            }

            _destinationFolder = $('#txtDestinationDirectory').val();

            if (_destinationFolder == null || _destinationFolder.trim().length < 1) {
                alert('Please enter a valid destination folder name!');
                return false;
            }
            return true;
        }

        function getImageFileNames() {
            var fileService = getFileService();
            if (!fileService)
                return false;

            if (!checkExperimentNameParameters())
                return false;

            if (!checkImageFilesParameters())
                return false;


            $("body").css("cursor", "progress");

            var df = ''; 
            if (document.getElementById('chkSourceDirectory').checked) {
                df = _destinationFolder + "/" + _currentExperimentName ;
            } else {
                df =  _destinationFolder + "/" + _currentExperimentName + "/" + _outputFolder;
            }
            
            //console.log(df);
            fileService.listFilesAndDirectoriesSegmented(_destinationShare, df, null, function (error, results) {
                //console.log('getImageFileNames');
                if (error) {
                    console.log(error);
                } else {
                    _outputImageFiles = [];
                    if (results.entries.files.length < 1) {
                        console.log('no files returned !!! length = 0');
                    }
                    else {
                        for (var i = 0, file; file = results.entries.files[i]; i++) {
                            if (file.name.includes(_fileExtension)) {
                                _outputImageFiles.push(file.name);
                                //console.log(file.name);
                            }
                        }
                    }
                }
            });
            $("body").css("cursor", "default");
            return true;
        }

        function checkImageFilesParameters() {
            if (!document.getElementById('chkSourceDirectory').checked) {
                _outputFolder = $('#txtOutputFolder').val();
                if (_outputFolder == null || _outputFolder.trim().length < 1) {
                    alert('Please enter a valid output folder name!');
                    return false;
                }
            }


            var comboBox = document.getElementById("ExperimentCollection");
            _currentExperimentName = comboBox.options[comboBox.selectedIndex].text.trim();

            if (_currentExperimentName == null || _currentExperimentName.length < 1) {
                alert('Please select a valid experiment name!');
                return false;
            }
            return true;
        }

        function getFileService() {
            if (!checkFileShareParameters())
                return null;

            fileUri = 'https://' + _account + '.file.core.windows.net';
            var fileService = AzureStorage.File.createFileServiceWithSas(fileUri, _sas).withFilter(new AzureStorage.File.ExponentialRetryPolicyFilter());
            return fileService;
        }

        function checkFileShareParameters() {
            _account = $('#txtAzureFileShareAccount').val();

            if (_account == null || _account.trim().length < 1) {
                alert('Please enter a valid storage account name!');
                return false;
            }

            _sas = $('#txtSAS').val();

            if (_sas == null || _sas.trim().length < 1) {
                alert('Please enter a valid SAS Token!');
                return false;
            }
            return true;
        }
    </script>
}