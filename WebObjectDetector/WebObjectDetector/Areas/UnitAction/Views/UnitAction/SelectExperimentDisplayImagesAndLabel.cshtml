
@{
    ViewData["Title"] = "SelectExperimentDisplayImagesAndLabel";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Select Experiment, Display Images And Label</h2>
<hr />


<div class="row">
    <div class="col-md-1">
        <label class="control-label"> </label>
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Azure File Share :</label>
    </div>
    <div class="col-md-2">
        <input class="form-control btn-block" id="txtAzureFileShareAccount" value="nkdsvm" />
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">SAS Key :</label>
    </div>
    <div class="col-md-2">
        <input class="form-control btn-block" id="txtSAS" value='?sv=2018-03-28&ss=f&srt=sco&sp=rl&se=2019-02-09T21:24:06Z&st=2019-01-11T13:24:06Z&spr=https,http&sig=yeE1W4qYlg3DdSycn%2FBcs6QFwUPR4z8ZyyIfb1B5nMQ%3D' />
    </div>
</div>


<div class="row">
    <div class="col-md-1">
        <label class="control-label"> </label>
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Destination Share :</label>
    </div>
    <div class="col-md-2">
        <input class="form-control btn-block" id="txtDestinationShare" value="experiment-data" />
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Destination Directory :</label>
    </div>
    <div class="col-md-2">
        <input class="form-control btn-block" id="txtDestinationDirectory" value="object-detection" />
    </div>
</div>


<div class="row ">
    <div class="col-md-1">
        <label class="control-label"> </label>
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Experiment Name :</label>
    </div>
    <div class="col-md-2">
        <select id="ExperimentCollection" class="form-control"></select>
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Output Folder :</label>
    </div>
    <div class="col-md-2">
        <input class="form-control btn-block" id="txtOutputFolder" value="output" />
    </div>
</div>


<div class="row">
    <div class="col-md-1">
        <label class="control-label"> </label>
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Cosmos DB Name:</label>
    </div>
    <div class="col-md-2">
        <input class="form-control btn-block" id="txtDbExperimentName" value="experiment-find-the-birdy" disabled />
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Document Id :</label>
    </div>
    <div class="col-md-2">
        <input class="form-control btn-block" id="txtDocumentId" value="userDetector" disabled />
    </div>
</div>

<div class="row">
    <div class="col-md-1">
        <label class="control-label"> </label>
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Operations:</label>
    </div>
    <div class="col-md-2">
        <button id="btnLoadExperiments" class="btn btn-primary" onclick="btnLoadExperimentsHandler(this)">Load Experiments</button>
    </div>
    <div class="col-md-2">
        <button id="btnLoadTag" class="btn btn-primary" onclick="btnLoadTagHandler(this)" disabled>Load Tags</button>
    </div>
    <div class="col-md-2">
        <button id="btnSaveTag" class="btn btn-primary" onclick="btnSaveTagHandler(this)">Save Tags</button>
    </div>
</div>

<div class="row form-group">
    <div class="col-md-1">
        <label class="control-label"> </label>
    </div>
    <div class="col-md-2 text-right ">
        <label class="control-label vcenter">Operation Result  :</label>
    </div>
    <div class="col-md-6">
        <label class="form-control btn-block" id="lblResult"></label>
    </div>
</div>

<div id="dynamicImages">
    <div class="row">
        <div class="col-md-2 nopad text-center">
            <label class="image-checkbox" id="1">
                <img class="img-responsive img-thumbnail" src="https://dummyimage.com/600x400/000/fff">
                <input type="checkbox" value="" />
                <i class="fa fa-check hidden"></i>
            </label>
        </div>
        <div class="col-md-2 nopad text-center">
            <label class="image-checkbox" id="2">
                <img class="img-responsive" src="https://dummyimage.com/600x400/000/fff" />
                <input type="checkbox" value="" />
                <i class="fa fa-check hidden"></i>
            </label>
        </div>
        <div class="col-md-2 nopad text-center">
            <label class="image-checkbox" id="3">
                <img class="img-responsive" src="https://dummyimage.com/600x400/000/fff" />
                <input type="checkbox" value="" />
                <i class="fa fa-check hidden"></i>
            </label>
        </div>
        <div class="col-md-2 nopad text-center">
            <label class="image-checkbox" id="4">
                <img class="img-responsive" src="https://dummyimage.com/600x400/000/fff" />
                <input type="checkbox" value="" />
                <i class="fa fa-check hidden"></i>
            </label>
        </div>
        <div class="col-md-2 nopad text-center">
            <label class="image-checkbox" id="5">
                <img class="img-responsive" src="https://dummyimage.com/600x400/000/fff" />
                <input type="checkbox" value="" />
                <i class="fa fa-check hidden"></i>
            </label>
        </div>
    </div>
</div>



@section Scripts {
<script>

/* ================== Push - Pull Functionality ================== */

    var _lastButton = [];
    var _lastButtonClass = [];

    function pushElement(elementID) {
        var element = document.getElementById(elementID);
        if (element) {
            _lastButton.push(element);
            _lastButtonClass.push(element.getAttribute("class"));
            element.setAttribute("class", "btn btn-default");
            $("body").css("cursor", "progress");
        }
    }

    function popElement() {
        var element = _lastButton.pop();
        var elementClass = _lastButtonClass.pop();
        if (element) {
            element.setAttribute("class", elementClass);
        }
        $("body").css("cursor", "default");
    }

/* ================== Push - Pull Functionality ================== */
/* ================== Tag - unTag Functionality ================== */
    // image gallery
    // init the state from the input
    function initImages() {
        $(".image-checkbox").each(function () {
            if ($(this).find('input[type="checkbox"]').first().attr("checked")) {
                $(this).addClass('image-checkbox-checked');
            }
            else {
                $(this).removeClass('image-checkbox-checked');
            }
        });
    }

    // Amazing way to resolve dynamic event mapping. 
    // courtesy: https://jqueryhouse.com/jquery-on-method-the-issue-of-dynamically-added-elements/
    $('div#dynamicImages').on("click", "label", function (e) {
        $(this).toggleClass('image-checkbox-checked');
        console.log($(this).attr('id'));

        var $checkbox = $(this).find('input[type="checkbox"]');
        $checkbox.prop("checked", !$checkbox.prop("checked"))
        e.preventDefault();
    }); 

    //// sync the state to the input
    //$(".image-checkbox").on("click", function (e) {
    //    $(this).toggleClass('image-checkbox-checked');
    //    var $checkbox = $(this).find('input[type="checkbox"]');
    //    $checkbox.prop("checked", !$checkbox.prop("checked"))
    //    e.preventDefault();
    //});

    //function btnClickImageHandler(obj) {
    //    $('#3').toggleClass('image-checkbox-checked');
    //    var $checkbox = $('#3').find('input[type="checkbox"]');
    //    $checkbox.prop("checked", !$checkbox.prop("checked"))
    //}

/* ================== Tag - unTag Functionality ================== */
/* ================== Ready and Click Handlers  ================== */
    $(function () // called when the body is ready
    {
        console.log("Ready");
        initImages();
        $('#ExperimentCollection').on('change', onExperimentCollChanged);
    });

    function btnLoadExperimentsHandler(obj) {
        getExperimentNames();
    }

    function onExperimentCollChanged() {
        var comboBox = document.getElementById("ExperimentCollection");
        _currentExperimentName = comboBox.options[comboBox.selectedIndex].text.trim();

        if (_currentExperimentName != null || _currentExperimentName.length > 0) {
            btnLoadTagHandler(document.getElementById('btnLoadTag'));
        }
    }

    function btnLoadTagHandler(obj) {
        loadTagValues(obj);
    }

    function btnSaveTagHandler(obj) {
        console.log("btnSaveTagHandler");
        SaveTagHandler(obj);
    }
/* ====================== Ready and Click Handlers  ======================== */
/* ====================== Loading Tag Values  ============================== */
    var _ID_FOR_USER_DETECTION = 'userDetection';
    var _imageLabelTag = [];

    function loadTagValues(obj) {
        // lets first load all the images relavant to the current experiment + output folder. 
        // Two variables, _outputImageFiles and _imageLabelTag are populated after successful invocation of this function. 
        if (!getImageFileNames()) {
            return false;
        }

        _imageLabelTag = []; // TODO:: we might be losing some previous unsaved entries!!!
        var dataVal = {
            ImageDetectionProvider: _ID_FOR_USER_DETECTION,
            ExperimentName: _currentExperimentName
        };
        var updatedTagJson = JSON.stringify(dataVal);
        pushElement(obj.id);
        InvokeWebAPICosmosDb('returnLabelledImageList', updatedTagJson, handlerCosmosDBReturnImageList);
    }

/* ====================== Loading Tag Values  ============================== */
/* ====================== Saving  Tag Values  ============================== */
    function SaveTagHandler(obj) {
        console.log('SaveTagHandler');

        if (!checkExperimentNameParameters())
            return false;


        var objArray = []; 

        $(".image-checkbox").each(function () {
            if ($(this).hasClass('image-checkbox-checked')) {
                var $divElement = $(this).find('div');
                if ($divElement) {
                    console.log($divElement.html());
                    var tempObj = { ImageName: $divElement.html(), ConfidenceScore: 1.0 };
                    objArray.push(tempObj)
                }
             }
        });

        if (objArray.length > 0) {
            var d = new Date();

            var dataVal = {
                ImageDetectionProvider: _ID_FOR_USER_DETECTION,
                ExperimentName: _currentExperimentName,
                DateTime: d.toUTCString(),
                detectedItems: objArray
            };
            var updatedTagJson = JSON.stringify(dataVal);
            //console.log(updatedTagJson);
            pushElement(obj.id);
            InvokeWebAPICosmosDb('saveLabelledImageList', updatedTagJson, handlerCosmosDBSaveImageList);
        }
        else {
            $('#lblResult').html('No Tags Saved as none were found');
        }
    }

    function handlerCosmosDBSaveImageList(evtXHR) {
        if (invocationCosmos.readyState == 4) {
            if (invocationCosmos.status == 200) {
                if (invocationCosmos.response) {
                    $('#lblResult').html(invocationCosmos.response);
                }
            }
            else {
                var AppendedText = "Invocation Errors Occured " + invocationCosmos.readyState + " and the status is " + invocationCosmos.status;
                $('#lblResult').html(AppendedText);
            }
            popElement();
        }
    }

/* ====================== Saving  Tag Values  ============================== */
/* ====================== Web API functinality ============================= */
    var invocationCosmos = new XMLHttpRequest();


    function InvokeWebAPICosmosDb(urlAdd, dataval, handler) {
        var url = 'http://localhost:5001/comsosDB/v1.0/' + urlAdd;

        if (invocationCosmos) {
            invocationCosmos.open('POST', url, true);
            invocationCosmos.setRequestHeader('Content-Type', 'application/json');
            invocationCosmos.onreadystatechange = handler;
            invocationCosmos.send(dataval);
        }
        else {
            var errorMsg = "No Invocation TookPlace At All";
            $('#lblResult').html(errorMsg);
        }
    }

    function handlerCosmosDBReturnImageList(evtXHR) {
        //console.log('handlerCosmosDBReturnImageList');
        if (invocationCosmos.readyState == 4) {
            if (invocationCosmos.status == 200) {
                if (invocationCosmos.response) {
                    //$('#lblResult').html(invocationCosmos.response);
                    $('#lblResult').html('Cosmos DB web API ok');
                    loadCurrentLabels(invocationCosmos.response);
                }
                else {
                    $('#lblResult').html("Null invocationCosmos.response");
                }
            }
            else {
                var AppendedText = "Invocation Errors Occured " + invocationCosmos.readyState + " and the status is " + invocationCosmos.status;
                $('#lblResult').html(AppendedText);
            }
            popElement();
        }
    }

    function loadCurrentLabels(response) {
        //console.log('loadCurrentLabels');
        _imageLabelTag = [];
        var tp = $.parseJSON(response);
        if (tp) {
            var result = tp["result"];
            if (result) {
                for (var j = 0; j < result.length; j++) {           // only one item is contained in the array
                    var detectedItems = result[j]["detectedItems"]; // leap of faith
                    if (detectedItems) {
                        for (var i = 0; i < detectedItems.length; i++) {
                            if (detectedItems[i]) {
                                _imageLabelTag.push(detectedItems[i]["ImageName"]);
                            }
                        }
                    }
                }
            }
        }
        // Me just thinks this makes a better solution. 
        sleep(500).then(() => {
            loadDynamicImageElements();
        });
    }

    function sleep(time) {
        return new Promise((resolve) => setTimeout(resolve, time));
    }

/* ====================== Web API functinality ============================= */
/* ====================== Load images ====================================== */

    function loadDynamicImageElements() {
        var numberofElementsToLoad = _outputImageFiles.length;
        var numberofElementsinaRow = 6;

        // Remove everything
        $("#dynamicImages").html("");
        document.getElementById('dynamicImages').innerHTML = "";
        _innerHtml = [];

        if (numberofElementsToLoad > 0) {
            var currentCount = 0;
            //TODO:: Surely this is rocket science
            var maxNumberOfLines = Math.floor(numberofElementsToLoad / numberofElementsinaRow) + (numberofElementsToLoad % numberofElementsinaRow ? 1 : 0);;
            var fileUri = 'https://' + _account + '.file.core.windows.net' + "/" + _destinationShare + "/" + _destinationFolder + "/" + _currentExperimentName + "/" + _outputFolder + "/";

            for (var currentLine = 0; currentLine < maxNumberOfLines; currentLine++) {
                _innerHtml.push('<div class="row">');
                for (var index = 0; index < numberofElementsinaRow;) {
                    if (currentCount < numberofElementsToLoad) {
                        var imageFileName = _outputImageFiles[currentCount];
                        var imgSrc = fileUri + imageFileName + _sas; 
                        //console.log(_outputImageFiles[currentCount]);
                        _innerHtml.push('<div class="col-md-2 nopad text-center">');
                        _innerHtml.push('<label class="image-checkbox" id="');
                        _innerHtml.push('imgLabel_' + currentCount.toString());
                        _innerHtml.push('">');
                        _innerHtml.push('<img class="img-responsive img-thumbnail" height="200" width="200" src="');
                        
                        _innerHtml.push(imgSrc);
                        _innerHtml.push('">');
                        _innerHtml.push('<div class="bottomleft" id="');
                        _innerHtml.push(imageFileName);
                        _innerHtml.push('">')
                        _innerHtml.push(imageFileName);
                        _innerHtml.push('</div >');
                        
                        if (_imageLabelTag.indexOf(imageFileName) >= 0) {
                            _innerHtml.push('<input type="checkbox" value="" checked />');
                        }
                        else {
                            _innerHtml.push('<input type="checkbox" value="" />');
                        }

                        _innerHtml.push('<i class="fa fa-check hidden"></i>');
                        _innerHtml.push('</label>');
                        _innerHtml.push('</div>');
                        currentCount++;
                        index++;
                    }
                    else {
                        break;
                    }
                }
                _innerHtml.push('</div>');
            }

            $("#dynamicImages").html(_innerHtml.join(''));
            initImages(); 
        }
    }

/* ======================= Load images ====================================== */
/* ======================= Azure File Share Functions ======================= */

    var _account = '';
    var _sas = '';
    var _outputImageFiles = [];
    var _experimentNames = [];
    var _destinationShare = '';
    var _destinationFolder = '';
    var _currentExperimentName = '';
    var _outputFolder = ''; 
    var _fileExtension = ".jpg"; 


    function getExperimentNames() {
        var fileService = getFileService();
        if (!fileService)
            return;

        if (!checkExperimentNameParameters())
            return null;

        $("body").css("cursor", "progress");
        fileService.listFilesAndDirectoriesSegmented(_destinationShare, _destinationFolder, null, function (error, results) {
            if (error) {
                console.log(error);
                $("body").css("cursor", "default");
            } else {
                _experimentNames = [];
                $('#ExperimentCollection').empty();
                _outputImageFiles = [];
                if (results.entries.directories.length < 1) {
                    console.log('no directories returned !!! length = 0');
                }
                else {
                        
                        for (var i = 0, file; file = results.entries.directories[i]; i++) {
                            _experimentNames.push(file.name);
                            var option = '';
                            option += '<option value="' + file.name + '">' + file.name + '</option>';
                            $('#ExperimentCollection').append(option);
                    }
                    onExperimentCollChanged();
                }
            }
        });
        $("body").css("cursor", "default");
    }

    function checkExperimentNameParameters() {
        _destinationShare = $('#txtDestinationShare').val();

        if (_destinationShare == null || _destinationShare.trim().length < 1) {
            alert('Please enter a valid storage destination share name!');
            return false;
        }

        _destinationFolder = $('#txtDestinationDirectory').val();

        if (_destinationFolder == null || _destinationFolder.trim().length < 1) {
            alert('Please enter a valid destination folder name!');
            return false;
        }
        return true;
    }

    function getImageFileNames() {
        var fileService = getFileService();
        if (!fileService)
            return false;

        if (!checkExperimentNameParameters())
            return false;

        if (!checkImageFilesParameters())
            return false;


        $("body").css("cursor", "progress");
        var df = _destinationFolder + "/" + _currentExperimentName + "/" + _outputFolder; 
        //console.log(df); 
        fileService.listFilesAndDirectoriesSegmented(_destinationShare, df, null, function (error, results) {
            //console.log('getImageFileNames');
            if (error) {
                console.log(error);
            } else {
                _outputImageFiles = [];
                if (results.entries.files.length < 1) {
                    console.log('no files returned !!! length = 0');
                }
                else {
                    for (var i = 0, file; file = results.entries.files[i]; i++) {
                        if (file.name.includes(_fileExtension)) {
                            _outputImageFiles.push(file.name);
                            //console.log(file.name);
                        }
                    }
                }
            }
        });
        $("body").css("cursor", "default");
        return true; 
    }

    function checkImageFilesParameters() {
        _outputFolder = $('#txtOutputFolder').val();

        if (_outputFolder == null || _outputFolder.trim().length < 1) {
            alert('Please enter a valid output folder name!');
            return false;
        }

        var comboBox = document.getElementById("ExperimentCollection");
        _currentExperimentName = comboBox.options[comboBox.selectedIndex].text.trim();

        if (_currentExperimentName == null || _currentExperimentName.length < 1) {
            alert('Please select a valid experiment name!');
            return false;
        }
        return true;
    }

    function getFileService() {
        if (!checkFileShareParameters())
            return null;

        fileUri = 'https://' + _account + '.file.core.windows.net';
        var fileService = AzureStorage.File.createFileServiceWithSas(fileUri, _sas).withFilter(new AzureStorage.File.ExponentialRetryPolicyFilter());
        return fileService;
    }

    function checkFileShareParameters() {
        _account = $('#txtAzureFileShareAccount').val();

        if (_account == null || _account.trim().length < 1) {
            alert('Please enter a valid storage account name!');
            return false;
        }

        _sas = $('#txtSAS').val();

        if (_sas == null || _sas.trim().length < 1) {
            alert('Please enter a valid SAS Token!');
            return false;
        }
        return true;
    }
    </script>
}